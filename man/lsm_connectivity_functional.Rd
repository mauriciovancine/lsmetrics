% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsm_connectivity_functional.R
\name{lsm_connectivity_functional}
\alias{lsm_connectivity_functional}
\title{Calculate functional connectivity}
\usage{
lsm_connectivity_functional(
  input,
  output = NULL,
  zero_as_null = FALSE,
  region_input = FALSE,
  gap_crossing_value,
  dilation_type = "minimum",
  id_direction = 8,
  area_round_digit = 0,
  area_unit = "ha",
  map_func_connec = TRUE,
  map_func_connec_id = FALSE,
  map_func_connec_area = FALSE,
  map_func_connec_ncell = FALSE,
  map_func_connec_dilation = FALSE,
  nprocs = 1,
  memory = 300
)
}
\arguments{
\item{input}{\verb{[character=""]} \cr Habitat map, following a binary classification (e.g. values 1,0 or 1,NA for habitat,non-habitat).}

\item{output}{\verb{[character=""]} \cr Habitat area map name output GRASS Data Base}

\item{zero_as_null}{\verb{[logical(1)=FALSE]} \cr If \code{TRUE}, the function treats non-habitat cells as null; if \code{FALSE}, the function converts non-habitat zero cells to null cells.}

\item{gap_crossing_value}{\verb{[numeric]} \cr Integer indicating gap crossing distance.}

\item{dilation_type}{\verb{[character=""]} \cr If}

\item{nprocs}{\verb{[numeric()]} \cr}

\item{memory}{\verb{[numeric()]} \cr}

\item{map_id}{\verb{[logical(1)=FALSE]} \cr If \code{TRUE}}

\item{map_ncell}{\verb{[logical(1)=FALSE]} \cr If \code{TRUE}}

\item{map_dilation}{\verb{[logical(1)=FALSE]} \cr If \code{TRUE}}
}
\description{
Identifies functional fragments connected and calculate area in hectare.
}
\examples{
library(lsmetrics)
library(terra)

# read habitat data
r <- lsmetrics::lsm_toy_landscape(proj_type = "meters")

# plot
plot(r, legend = FALSE, axes = FALSE, main = "Binary habitat")
plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE)
plot(as.polygons(r), add = TRUE)
text(r)

# find grass
path_grass <- system("grass --config path", inter = TRUE) # windows users need to find the grass gis path installation, e.g. "C:/Program Files/GRASS GIS 8.3"

# create grassdb
rgrass::initGRASS(gisBase = path_grass,
                  SG = r,
                  gisDbase = "grassdb",
                  location = "newLocation",
                  mapset = "PERMANENT",
                  override = TRUE)

# import raster from r to grass
rgrass::write_RAST(x = r, flags = c("o", "overwrite", "quiet"), vname = "r")

# functional connectivity
lsmetrics::lsm_connectivity_functional(input = "r",
                                       gap_crossing = 100,
                                       map_func_connec_area =  TRUE,
                                       map_func_connec_id = TRUE,
                                       map_func_connec_dilation = TRUE)

# files
rgrass::execGRASS(cmd = "g.list", type = "raster")

# import do r
r_func_connec200_id <- rgrass::read_RAST("r_func_connec200_id", flags = "quiet", return_format = "terra")
r_func_connec200_dilation <- rgrass::read_RAST("r_func_connec200_dilation", flags = "quiet", return_format = "terra")

plot(r_func_connec200_dilation, legend = FALSE, axes = FALSE,main = "Functional connected area id (200 m)")
plot(r_func_connec200_id, legend = FALSE, axes = FALSE, add = TRUE)
plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE)
plot(as.polygons(r), add = TRUE)
text(r_func_connec200_id)

# import to r
r_func_connec200_area <- rgrass::read_RAST("r_func_connec200_area", flags = "quiet", return_format = "terra")

plot(r_func_connec200_dilation, legend = FALSE, axes = FALSE, main = "Functional connected area (ha) (200 m)")
plot(r_func_connec200_area, legend = FALSE, axes = FALSE, add = TRUE)
plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE)
plot(as.polygons(r), add = TRUE)
text(r_func_connec200_area)

# import to r
r_func_connec200 <- rgrass::read_RAST("r_func_connec200", flags = "quiet", return_format = "terra")

plot(r_func_connec200_dilation, legend = FALSE, axes = FALSE, main = "Functional connectivity (ha) (200 m)")
plot(r_func_connec200, legend = FALSE, axes = FALSE, add = TRUE)
plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE)
plot(as.polygons(r), add = TRUE)
text(r_func_connec200)

# delete grassdb
unlink("grassdb", recursive = TRUE)
}
