[{"path":[]},{"path":"https://mauriciovancine.github.io/lsmetrics/articles/lsmetrics.html","id":"overview-of-the-package","dir":"Articles","previous_headings":"","what":"Overview of the package","title":"Getting started with the lsmetrics package","text":"Table 1: Main functions lsmetrics.","code":""},{"path":[]},{"path":"https://mauriciovancine.github.io/lsmetrics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maurício Vancine. Author, maintainer. Bernardo Niebuhr. Author. Renata L. Muylaert. Author. Felipe Martello Ribeiro. Author. John Wesley Ribeiro. Author. Milton Cezar Ribeiro. Author.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vancine M, Niebuhr B, Muylaert R, Ribeiro F, Ribeiro J, Ribeiro M (2025). lsmetrics: tool calculating ecologically scaled landscape metrics. R package version 0.0.1, https://mauriciovancine.github.io/lsmetrics.","code":"@Manual{,   title = {lsmetrics: a tool for calculating ecologically scaled landscape metrics},   author = {Maurício Vancine and Bernardo Niebuhr and Renata L. Muylaert and Felipe Martello Ribeiro and John Wesley Ribeiro and Milton Cezar Ribeiro},   year = {2025},   note = {R package version 0.0.1},   url = {https://mauriciovancine.github.io/lsmetrics}, }"},{"path":"https://mauriciovancine.github.io/lsmetrics/index.html","id":"lsmetrics-","dir":"","previous_headings":"","what":"a tool for calculating ecologically scaled landscape metrics","title":"a tool for calculating ecologically scaled landscape metrics","text":"lsmetrics provides tools calculate landscape metrics using R GRASS GIS.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/index.html","id":"instalation","dir":"","previous_headings":"","what":"Instalation","title":"a tool for calculating ecologically scaled landscape metrics","text":"install development version lsmetrics R package, please use:","code":"library(devtools) devtools::install_github(\"mauriciovancine/lsmetrics\")"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate patch area — lsm_area","title":"Calculate patch area — lsm_area","text":"Identifies patches calculates area hectare.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate patch area — lsm_area","text":"","code":"lsm_area(input, output = NULL, zero_as_na = FALSE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate patch area — lsm_area","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate patch area — lsm_area","text":"","code":"library(lsmetrics) library(terra) #> terra 1.7.29  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"   # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_area(input = \"r\", zero_as_na = FALSE) #> Converting zero as null #> Identifying the patches #> Counting the cell number of patches #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of patches #> Changing the raster color  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_pid <- rgrass::read_RAST(\"r_pid\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_pid, legend = FALSE, axes = FALSE, main = \"Patch id\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_pid)   # import from grass to r r_area <- rgrass::read_RAST(\"r_area_ha\", flags = \"quiet\", return_format = \"terra\")  plot(r_area, legend = FALSE, axes = FALSE, main = \"Area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_area)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area_fragment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fragment area — lsm_area_fragment","title":"Calculate fragment area — lsm_area_fragment","text":"Identifies fragments calculates area selected unit.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area_fragment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fragment area — lsm_area_fragment","text":"","code":"lsm_area_fragment(   input,   output = NULL,   zero_as_null = FALSE,   region_input = FALSE,   id_direction = 8,   area_round_digit = 0,   area_unit = \"ha\",   map_fragment_id = FALSE,   map_fragment_ncell = FALSE,   map_fragment_area = TRUE,   table_fragment_area = FALSE )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area_fragment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fragment area — lsm_area_fragment","text":"input [character] Habitat map (binary classification: e.g., 1/0 1/NA) GRASS. output [character] Output map base name GRASS. zero_as_null [logical] TRUE, non-habitat (0) cells converted NULL. region_input [logical] id_direction [numeric] Neighborhood clumping (4 8). area_round_digit [integer] Decimal digits area rounding. area_unit [character] Area unit: \"ha\", \"m2\", \"km2\". map_fragment_id [logical] Keep fragment ID raster? map_fragment_ncell [logical] Output raster fragment cell counts? map_fragment_area [logical] Output raster fragment area? table_fragment_area [logical] Output CSV fragment area summary?","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area_fragment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fragment area — lsm_area_fragment","text":"","code":"library(lsmetrics) library(terra) #> terra 1.8.60  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_area_fragment(input = \"r\", map_fragment_id = TRUE, table_fragment_area = TRUE) #> Converting zeros to null #> Identifying fragments #> Calculation area #> Mask creating #> Area calculating #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Color assigning #> Table exporting #> Cleaning data  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r #> r_fragment_area #> r_fragment_id  # import from grass to r r_fragment_id <- rgrass::read_RAST(\"r_fragment_id\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_fragment_id, legend = FALSE, axes = FALSE, main = \"Fragment id\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_id)   # import from grass to r r_fragment_area <- rgrass::read_RAST(\"r_fragment_area\", flags = \"quiet\", return_format = \"terra\")  plot(r_fragment_area, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area)   # table da_fragment_area <- vroom::vroom(\"r_fragment_table_area.csv\", show_col_types = FALSE) da_fragment_area #> # A tibble: 6 × 3 #>      id  area ncell #>   <dbl> <dbl> <dbl> #> 1     1     9     9 #> 2     2    25    25 #> 3     3    39    39 #> 4     4     2     2 #> 5     5    34    34 #> 6     6     1     1  # delete grassdb unlink(\"r_fragment_table_area.csv\") unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area_patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate patch area — lsm_area_patch","title":"Calculate patch area — lsm_area_patch","text":"Identifies patch calculates area hectare.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area_patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate patch area — lsm_area_patch","text":"","code":"lsm_area_patch(   input,   output = NULL,   zero_as_null = FALSE,   area_round_digit = 0,   area_unit = \"ha\",   map_patch_id = FALSE,   map_patch_area = TRUE,   map_patch_ncell = FALSE,   map_patch_area_original = FALSE,   map_patch_number_original = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area_patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate patch area — lsm_area_patch","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_null [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. area_round_digit [logical(1)=FALSE]  TRUE nprocs [numeric()] memory [numeric()] region_input [logical] map_id [logical(1)=FALSE]  TRUE map_ncell [logical(1)=FALSE]  TRUE map_patch_original [logical(1)=FALSE]  TRUE map_patch_number [logical(1)=FALSE]  TRUE","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_area_patch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate patch area — lsm_area_patch","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # patch area lsmetrics::lsm_area_patch(input = \"r\",                           map_patch_id = TRUE,                           map_patch_area_original = TRUE,                           map_patch_number_original = TRUE) #> Error in lsmetrics::lsm_area_patch(input = \"r\", map_patch_id = TRUE, map_patch_area_original = TRUE,     map_patch_number_original = TRUE): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import from grass to r r_patch_id <- rgrass::read_RAST(\"r_patch_id\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_patch_id not found in mapsets in search path: PERMANENT  plot(r_patch_id, legend = FALSE, axes = FALSE, main = \"Patch id\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_patch_id' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_id) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_patch_id' not found  r_patch_area <- rgrass::read_RAST(\"r_patch_area\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_patch_area not found in mapsets in search path: PERMANENT  plot(r_patch_area, legend = FALSE, axes = FALSE, main = \"Patch area (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_patch_area' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_area) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_patch_area' not found  r_patch_area_original <- rgrass::read_RAST(\"r_patch_area_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_patch_area_original not found in mapsets in search path: PERMANENT  plot(r_patch_area_original, legend = FALSE, axes = FALSE, main = \"Patch area original (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_patch_area_original' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_area_original) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_patch_area_original' not found  r_patch_number_original <- rgrass::read_RAST(\"r_patch_number_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_patch_number_original not found in mapsets in search path: PERMANENT  plot(r_patch_number_original, legend = FALSE, axes = FALSE, main = \"Number of patch (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_patch_number_original' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_patch_number_original) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_patch_number_original' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate area — lsm_aux_area","title":"Calculate area — lsm_aux_area","text":"Calculate area.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate area — lsm_aux_area","text":"","code":"lsm_aux_area(   input_null,   input_id,   area_round_digit = 0,   area_unit = \"ha\",   map_ncell = FALSE,   table_export = FALSE )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate area — lsm_aux_area","text":"input_null [character=\"\"] Habitat map (binary classification: e.g., 1/0 1/NA) GRASS. input_id [character=\"\"] Habitat map (binary classification: e.g., 1/0 1/NA) GRASS. area_round_digit [integer] Decimal digits area rounding. area_unit [character=\"\"] Area unit: \"ha\", \"m2\", \"km2\". map_ncell [logical] Calculate number cells. table_export [logical] Calculate number cells.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate area — lsm_aux_area","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"degrees\")  # plot plot(r, col = c(\"white\", \"forestgreen\"), legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       -22.35558  #> south       -22.36995  #> west        -47.58312  #> east        -47.56875  #> nsres       0.000898125  #> ewres       0.000898125  #> projection: #>  GEOGCRS[\"WGS 84\", #>     ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>         MEMBER[\"World Geodetic System 1984 (Transit)\"], #>         MEMBER[\"World Geodetic System 1984 (G730)\"], #>         MEMBER[\"World Geodetic System 1984 (G873)\"], #>         MEMBER[\"World Geodetic System 1984 (G1150)\"], #>         MEMBER[\"World Geodetic System 1984 (G1674)\"], #>         MEMBER[\"World Geodetic System 1984 (G1762)\"], #>         MEMBER[\"World Geodetic System 1984 (G2139)\"], #>         ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>             LENGTHUNIT[\"metre\",1]], #>         ENSEMBLEACCURACY[2.0]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     USAGE[ #>         SCOPE[\"Horizontal component of 3D system.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]], #>     ID[\"EPSG\",4326]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # null rgrass::execGRASS(cmd = \"r.mapcalc\", flags = \"overwrite\", expression = \"r_null = if(r == 1, 1, null())\")  # clump rgrass::execGRASS(cmd = \"r.clump\", flags = \"overwrite\", input = \"r_null\", output = \"r_id\") #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  11%  22%  33%  44%  55%  66%  77%  88% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 6 clumps.  # area lsmetrics::lsm_aux_area(input_null = \"r_null\",                         input_id = \"r_id\",                         area_round_digit = 1,                         area_unit = \"ha\",                         map_ncell = TRUE,                         table_export = TRUE) #> Cell counting #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Mask creating #> Area calculating #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Color assigning #> Table exporting  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r #> r_area #> r_id #> r_ncell #> r_null  # import from grass to r r_id <- terra::rast(rgrass::read_RAST(\"r_id\", flags = \"quiet\", return_format = \"SGDF\")) #> Creating BIL support files... #> Exporting raster as integer values (bytes=4) #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% r_ncell <- terra::rast(rgrass::read_RAST(\"r_ncell\", flags = \"quiet\", return_format = \"SGDF\")) #> Creating BIL support files... #> Exporting raster as floating values (bytes=4) #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% r_area <- terra::rast(rgrass::read_RAST(\"r_area\", flags = \"quiet\", return_format = \"SGDF\")) #> Creating BIL support files... #> Exporting raster as floating values (bytes=4) #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100%  # plot plot(r_id, legend = FALSE, axes = FALSE, main = \"Fragment ID\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_id)   plot(r_ncell, legend = FALSE, axes = FALSE, main = \"Number of cells\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_ncell)   plot(r_area, legend = FALSE, axes = FALSE, main = \"Area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_area, digits = 3)   # table r_table_area <- vroom::vroom(\"r_table_area.csv\", show_col_types = FALSE) r_table_area #> # A tibble: 6 × 3 #>      id  area ncell #>   <dbl> <dbl> <dbl> #> 1     1   8.1     9 #> 2     2  22.6    25 #> 3     3  35      39 #> 4     4   1.8     2 #> 5     5  30.6    34 #> 6     6   1       1  # delete grassdb unlink(\"r_fragment_table_area.csv\")  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_fill_hole.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill holes — lsm_aux_fill_hole","title":"Fill holes — lsm_aux_fill_hole","text":"Fill holes.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_fill_hole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill holes — lsm_aux_fill_hole","text":"","code":"lsm_aux_fill_hole(   input,   output = NULL,   zero_as_null = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_fill_hole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill holes — lsm_aux_fill_hole","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_null [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. nprocs [numeric()] memory [numeric()]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_fill_hole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill holes — lsm_aux_fill_hole","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, col = c(\"white\", \"forestgreen\"), legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # fill holes lsmetrics::lsm_aux_fill_hole(input = \"r\") #> Converting zero as null #> Identifying fragments #> Creating matrix #> Filling holes #> Registered S3 methods overwritten by 'readr': #>   method                    from  #>   as.data.frame.spec_tbl_df vroom #>   as_tibble.spec_tbl_df     vroom #>   format.col_spec           vroom #>   print.col_spec            vroom #>   print.collector           vroom #>   print.date_names          vroom #>   print.locale              vroom #>   str.col_spec              vroom #> Cleaning data #> WARNING: Raster map <r_aux_fill_hole_matrix_id@PERMANENT> is a base map for #>          <r_aux_fill_hole_matrix_id_fill@PERMANENT>. Remove forced.  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r #> r_aux_fill_hole  # import from grass to r r_aux_fill_hole <- terra::rast(rgrass::read_RAST(\"r_aux_fill_hole\", flags = \"quiet\", return_format = \"SGDF\")) #> Creating BIL support files... #> Exporting raster as floating values (bytes=4) #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100%  # plot plot(r_aux_fill_hole + r, col = c(\"white\", \"blue\", \"forestgreen\"), legend = FALSE, axes = FALSE, main = \"Fragment fill hole\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_aux_fill_hole)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_fix_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix names — lsm_aux_fix_names","title":"Fix names — lsm_aux_fix_names","text":"Fix names.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_fix_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix names — lsm_aux_fix_names","text":"","code":"lsm_aux_fix_names(input)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_fix_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix names — lsm_aux_fix_names","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_aux_fix_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix names — lsm_aux_fix_names","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r-raster-landcape.tif\", verbose = FALSE)  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r-raster-landcape.tif  # fix names input <- lsmetrics::lsm_aux_fix_names(input = \"r-raster-landcape.tif\") input #> [1] \"r_raster_landcape_tif\"  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r_raster_landcape_tif  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_buffer_statistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create buffers and calculate statistics — lsm_buffer_statistic","title":"Create buffers and calculate statistics — lsm_buffer_statistic","text":"Create buffers calculate statistics","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_buffer_statistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create buffers and calculate statistics — lsm_buffer_statistic","text":"","code":"lsm_buffer_statistic(   input,   output = NULL,   landscape_metric,   landscape_metric_has_null = FALSE,   point,   distance,   column_prefix,   method = \"average\",   percentile = NULL )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_buffer_statistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create buffers and calculate statistics — lsm_buffer_statistic","text":"input [character=\"\"] output [character=\"\"]  Map name output inside GRASS Data Base. landscape_metric [character=\"\"] landscape_metric_has_null [character=\"\"] distance [character=\"\"] column_prefix [character=\"\"] method [character=\"\"]  Univariate statistics: number, null_cells, minimum ,maximum, range, average, stddev, variance, coeff_var, sum, first_quartile ,median, third_quartile, percentile percentile [character=\"\"] points [character=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_buffer_statistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create buffers and calculate statistics — lsm_buffer_statistic","text":"","code":"library(lsmetrics) library(terra) #> terra 1.8.54  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # points p <- terra::vect(data.frame(x = c(235150, 234450, 235150),                             y = c(7525250, 7524850, 7524350)),                  geom = c(\"x\", \"y\"),                  crs = \"+proj=utm +zone=23 +south +datum=WGS84 +units=m +no_defs +type=crs\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Points\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) plot(p, cex = 3, add = TRUE)   # import vector from r to grass rgrass::write_VECT(x = p, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"p\")  # area lsmetrics::lsm_fragment_area(input = \"r\") #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes  # buffer statistics lsmetrics::lsm_buffer_statistic(input = \"r\",                                 landscape_metric = \"r_fragment_area_ha\",                                 landscape_metric_has_null = TRUE,                                 point = \"p\",                                 distance = 200,                                 column_prefix = \"area\",                                 method = \"average\") #> Buffering features... #>   33%  66% 100% #> Cleaning buffers... #> Building parts of topology... #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Registering primitives... #>  #> Snapping boundaries... #> Reading features... #> Snap vertices Pass 1: select points #>    0%  33%  66% 100% #> Snap vertices Pass 2: assign anchor vertices #>    4%  10%  15%  20%  26%  31%  36%  42%  47%  52%  57%  62%  68%  73%  78%  84%  89%  94% 100% #> Snap vertices Pass 3: snap to assigned points #>    0%  33%  66% 100% #> Breaking polygons... #> Breaking polygons (pass 1: select break points)... #>   33%  66% 100% #> Breaking polygons (pass 2: break at selected points)... #>   33%  66% 100% #> Removing duplicates... #>   33%  66% 100% #> Breaking boundaries... #>    0%  33%  66% 100% #> Removing duplicates... #>   33%  66% 100% #> Cleaning boundaries at nodes #>   33%  66% 100% #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Building areas... #>    0%  33%  66% 100% #> Removing dangles... #>   33%  66% 100% #> Removing bridges... #>   33%  66% 100% #> Attaching islands... #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Attaching islands... #>    0%  33%  66% 100% #> Calculating centroids for areas... #>   33%  66% 100% #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Registering primitives... #>  #> Building areas... #>    0%  33%  66% 100% #> Attaching islands... #>    0%  33%  66% 100% #> Attaching centroids... #>    0%  33%  66% 100% #> Processing input data (3 categories)... #> Adding columns '['area_average DOUBLE PRECISION']' #> Adding column <area_average> to the table #>    6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #>  100% #> Updating the database ... #> Statistics calculated from raster map <r_fragment_area_ha_zero> and #> uploaded to attribute table of vector map <r_p_buffer200>.  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"vector\")  # import from grass to r r_fragment_area <- rgrass::read_RAST(\"r_fragment_area_ha\", flags = \"quiet\", return_format = \"terra\")  # import buffer v_buffer <- rgrass::read_VECT(\"r_p_buffer200\", flags = \"quiet\")  # plot plot(r_fragment_area, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area) plot(v_buffer, \"area_average\", legend = FALSE, alpha = .5, add = TRUE) plot(p, col = \"gray30\", cex = 3, add = TRUE) text(v_buffer, col = \"white\", labels = \"area_average\", cex = .7)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_buffer_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create buffers and calculate statistics — lsm_buffer_statistics","title":"Create buffers and calculate statistics — lsm_buffer_statistics","text":"Create buffers calculate statistics","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_buffer_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create buffers and calculate statistics — lsm_buffer_statistics","text":"","code":"lsm_buffer_statistics(   input,   output = NULL,   landscape_metric,   landscape_metric_has_null = FALSE,   point,   distance,   column_prefix,   method = \"average\",   percentile = NULL )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_buffer_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create buffers and calculate statistics — lsm_buffer_statistics","text":"input [character=\"\"] output [character=\"\"]  Map name output inside GRASS Data Base. landscape_metric [character=\"\"] landscape_metric_has_null [character=\"\"] distance [character=\"\"] column_prefix [character=\"\"] method [character=\"\"]  Univariate statistics: number, null_cells, minimum ,maximum, range, average, stddev, variance, coeff_var, sum, first_quartile ,median, third_quartile, percentile percentile [character=\"\"] points [character=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_buffer_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create buffers and calculate statistics — lsm_buffer_statistics","text":"","code":"library(lsmetrics) library(terra) #> terra 1.7.29  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"   # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # points p <- terra::vect(data.frame(x = c(235150, 234450, 235150),                             y = c(7525250, 7524850, 7524350)),                  geom = c(\"x\", \"y\"),                  crs = \"+proj=utm +zone=23 +south +datum=WGS84 +units=m +no_defs +type=crs\")  # import raster from r to grass rgrass::write_VECT(x = p, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"p\") #> Warning: GDAL Message 6: dataset /tmp/RtmpVyOG68/file710d15aeb084.gpkg does not support layer creation option ENCODING  # area lsmetrics::lsm_fragment_area(input = \"r\", id = TRUE, ncell = TRUE, area_integer = TRUE) #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes  # buffer statistics lsmetrics::lsm_buffer_statistics(input = \"r\",                                  landscape_metric = \"r_fragment_area_ha\",                                  landscape_metric_has_null = TRUE,                                  point = \"p\",                                  distance = 200,                                  column_prefix = \"area\",                                  method = \"average\") #> Buffering features... #>   33%  66% 100% #> Cleaning buffers... #> Building parts of topology... #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Registering primitives... #>  #> Snapping boundaries... #> Reading features... #> Snap vertices Pass 1: select points #>    0%  33%  66% 100% #> Snap vertices Pass 2: assign anchor vertices #>    4%  10%  15%  20%  26%  31%  36%  42%  47%  52%  57%  62%  68%  73%  78%  84%  89%  94% 100% #> Snap vertices Pass 3: snap to assigned points #>    0%  33%  66% 100% #> Breaking polygons... #> Breaking polygons (pass 1: select break points)... #>   33%  66% 100% #> Breaking polygons (pass 2: break at selected points)... #>   33%  66% 100% #> Removing duplicates... #>   33%  66% 100% #> Breaking boundaries... #>    0%  33%  66% 100% #> Removing duplicates... #>   33%  66% 100% #> Cleaning boundaries at nodes #>   33%  66% 100% #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Building areas... #>    0%  33%  66% 100% #> Removing dangles... #>   33%  66% 100% #> Removing bridges... #>   33%  66% 100% #> Attaching islands... #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Attaching islands... #>    0%  33%  66% 100% #> Calculating centroids for areas... #>   33%  66% 100% #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Registering primitives... #>  #> Building areas... #>    0%  33%  66% 100% #> Attaching islands... #>    0%  33%  66% 100% #> Attaching centroids... #>    0%  33%  66% 100% #> Processing input data (3 categories)... #> Adding columns '['area_average DOUBLE PRECISION']' #> Adding column <area_average> to the table #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Updating the database ... #> Statistics calculated from raster map <r_fragment_area_ha_zero> and #> uploaded to attribute table of vector map <r_p_buffer200>. #> Converting color rules into categories... #>    0%  33%  66% 100% #> Writing color rules... #> Color table for vector map <r_p_buffer200@PERMANENT> set to 'viridis'  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"vector\")  # import from grass to r r_fragment_area <- rgrass::read_RAST(\"r_fragment_area_ha\", flags = \"quiet\", return_format = \"terra\")  # import buffer v_buffer <- rgrass::read_VECT(\"r_p_buffer200\", flags = \"quiet\")  # plot plot(r_fragment_area, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area) plot(v_buffer, \"area_average\", alpha = .5, add = TRUE) plot(p, col = \"gray30\", cex = 3, add = TRUE) text(v_buffer, col = \"white\", labels = \"area_average\", cex = .7)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_connectivity_functional.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate functional connectivity — lsm_connectivity_functional","title":"Calculate functional connectivity — lsm_connectivity_functional","text":"Identifies functional fragments connected calculate area hectare.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_connectivity_functional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate functional connectivity — lsm_connectivity_functional","text":"","code":"lsm_connectivity_functional(   input,   output = NULL,   zero_as_null = FALSE,   gap_crossing_value,   dilation_type = \"minimum\",   id_direction = 8,   area_round_digit = 0,   area_unit = \"ha\",   map_func_connec = TRUE,   map_func_connec_id = FALSE,   map_func_connec_area = FALSE,   map_func_connec_ncell = FALSE,   map_func_connec_dilation = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_connectivity_functional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate functional connectivity — lsm_connectivity_functional","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Habitat area map name output GRASS Data Base zero_as_null [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. gap_crossing_value [numeric]  Integer indicating gap crossing distance. dilation_type [character=\"\"]  nprocs [numeric()] memory [numeric()] map_id [logical(1)=FALSE]  TRUE map_ncell [logical(1)=FALSE]  TRUE map_dilation [logical(1)=FALSE]  TRUE","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_connectivity_functional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate functional connectivity — lsm_connectivity_functional","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from memory  # functional connectivity lsmetrics::lsm_connectivity_functional(input = \"r\",                                        gap_crossing = 100,                                        map_func_connec_area =  TRUE,                                        map_func_connec_id = TRUE,                                        map_func_connec_dilation = TRUE) #> Error in lsmetrics::lsm_connectivity_functional(input = \"r\", gap_crossing = 100,     map_func_connec_area = TRUE, map_func_connec_id = TRUE, map_func_connec_dilation = TRUE): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import do r r_func_connec200_id <- rgrass::read_RAST(\"r_func_connec200_id\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_func_connec200_id not found in mapsets in search path: PERMANENT r_func_connec200_dilation <- rgrass::read_RAST(\"r_func_connec200_dilation\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_func_connec200_dilation not found in mapsets in search path: PERMANENT  plot(r_func_connec200_dilation, legend = FALSE, axes = FALSE,main = \"Functional connected area id (200 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_func_connec200_dilation' not found plot(r_func_connec200_id, legend = FALSE, axes = FALSE, add = TRUE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_func_connec200_id' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_func_connec200_id) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_func_connec200_id' not found  # import to r r_func_connec200_area <- rgrass::read_RAST(\"r_func_connec200_area\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_func_connec200_area not found in mapsets in search path: PERMANENT  plot(r_func_connec200_dilation, legend = FALSE, axes = FALSE, main = \"Functional connected area (ha) (200 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_func_connec200_dilation' not found plot(r_func_connec200_area, legend = FALSE, axes = FALSE, add = TRUE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_func_connec200_area' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_func_connec200_area) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_func_connec200_area' not found  # import to r r_func_connec200 <- rgrass::read_RAST(\"r_func_connec200\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_func_connec200 not found in mapsets in search path: PERMANENT  plot(r_func_connec200_dilation, legend = FALSE, axes = FALSE, main = \"Functional connectivity (ha) (200 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_func_connec200_dilation' not found plot(r_func_connec200, legend = FALSE, axes = FALSE, add = TRUE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_func_connec200' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_func_connec200) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_func_connec200' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_connectivity_structural.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate structural connectivity — lsm_connectivity_structural","title":"Calculate structural connectivity — lsm_connectivity_structural","text":"Identifies patch calculates area hectare.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_connectivity_structural.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate structural connectivity — lsm_connectivity_structural","text":"","code":"lsm_connectivity_structural(   input,   output = NULL,   zero_as_null = FALSE,   id_direction = 8,   area_round_digit = 0,   area_unit = \"ha\",   map_connec_struct = TRUE,   map_connec_struct_area = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_connectivity_structural.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate structural connectivity — lsm_connectivity_structural","text":"input [character] Habitat map (binary classification: e.g., 1/0 1/NA) GRASS. output [character] Output map base name GRASS. zero_as_null [logical] TRUE, non-habitat (0) cells converted NULL. id_direction [numeric] Neighborhood clumping (4 8). area_round_digit [integer] Decimal digits area rounding. area_unit [character] Area unit: \"ha\", \"m2\", \"km2\". map_id [logical] Keep fragment ID raster? map_ncell [logical] Output raster fragment cell counts? map_area [logical] Output raster fragment area?","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_connectivity_structural.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate structural connectivity — lsm_connectivity_structural","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]    # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # structural connectivity lsmetrics::lsm_connectivity_structural(input = \"r\",                                        zero_as_null = FALSE,                                        map_connec_struct = TRUE,                                        map_connec_struct_area = TRUE) #> Error in lsmetrics::lsm_connectivity_structural(input = \"r\", zero_as_null = FALSE,     map_connec_struct = TRUE, map_connec_struct_area = TRUE): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import from grass to r r_struct_connec_area <- rgrass::read_RAST(\"r_struct_connec_area\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_struct_connec_area not found in mapsets in search path: PERMANENT  plot(r_struct_connec_area, legend = FALSE, axes = FALSE, main = \"Structural connected area (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_struct_connec_area' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_struct_connec_area) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_struct_connec_area' not found  # import from grass to r r_struct_connec <- rgrass::read_RAST(\"r_struct_connec\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_struct_connec not found in mapsets in search path: PERMANENT  plot(r_struct_connec, legend = FALSE, axes = FALSE, main = \"Structural connectivity (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_struct_connec' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_struct_connec) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_struct_connec' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_core.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the core of landscape elements — lsm_core","title":"Identify the core of landscape elements — lsm_core","text":"Identify core landscape elements pixel. Calculate area, original area percentage.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the core of landscape elements — lsm_core","text":"","code":"lsm_core(   input,   output = NULL,   zero_as_null = FALSE,   edge_depth,   edge_contraction = \"maximum\",   area_round_digits = 0,   area_unit = \"ha\",   map_core_id = FALSE,   map_core_ncell = FALSE,   map_core_area = FALSE,   map_core_number = FALSE,   map_core_area_index = FALSE,   map_core_id_original = FALSE,   map_core_ncell_original = FALSE,   map_core_area_original = FALSE,   map_core_percentage = FALSE,   buffer_radius = NULL,   buffer_circular = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the core of landscape elements — lsm_core","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_null [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. edge_depth [numeric]  Integer indicating edge distance meters considered adjacent form patch. edge_contraction [character=\"\"] area_round_digits [logical(1)=FALSE]  TRUE area_unit [logical(1)=FALSE]  TRUE map_core_id [logical(1)=FALSE] map_core_ncell [logical(1)=FALSE] map_core_area [logical(1)=FALSE] map_core_area_index [logical(1)=FALSE] map_core_id_original [logical(1)=FALSE] map_core_ncell_original [logical(1)=FALSE] map_core_area_original [logical(1)=FALSE] map_core_percentage [logical(1)=FALSE] buffer_radius [numeric] buffer_circular [logical(1)=FALSE] nprocs [numeric()] memory [numeric()]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_core.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the core of landscape elements — lsm_core","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from memory  # core and edge lsmetrics::lsm_core_edge(input = \"r\",                          edge_depth = 100,                          core_edge_type = \"both\",                          id = TRUE,                          core_number = TRUE,                          core_edge_original = TRUE,                          calculate_area = TRUE,                          calculate_percentage = TRUE,                          buffer_radius = 100,                          buffer_circular = FALSE) #> Error: 'lsm_core_edge' is not an exported object from 'namespace:lsmetrics'  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_core100 <- rgrass::read_RAST(\"r_core100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100 not found in mapsets in search path: PERMANENT r_core100_id <- rgrass::read_RAST(\"r_core100_id\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_id not found in mapsets in search path: PERMANENT r_core100_area_ha <- rgrass::read_RAST(\"r_core100_area_ha\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_area_ha not found in mapsets in search path: PERMANENT r_core100_area_ha_original <- rgrass::read_RAST(\"r_core100_area_ha_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_area_ha_original not found in mapsets in search path: PERMANENT r_core100_core_number <- rgrass::read_RAST(\"r_core100_core_number_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_core_number_original not found in mapsets in search path: PERMANENT r_core100_pct_buf100 <- rgrass::read_RAST(\"r_core100_pct_buf100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_pct_buf100 not found in mapsets in search path: PERMANENT  r_edge100 <- rgrass::read_RAST(\"r_edge100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100 not found in mapsets in search path: PERMANENT r_edge100_id <- rgrass::read_RAST(\"r_edge100_id\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_id not found in mapsets in search path: PERMANENT r_edge100_area_ha <- rgrass::read_RAST(\"r_edge100_area_ha\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_area_ha not found in mapsets in search path: PERMANENT r_edge100_area_ha_original <- rgrass::read_RAST(\"r_edge100_area_ha_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_area_ha_original not found in mapsets in search path: PERMANENT r_edge100_pct_buf100 <- rgrass::read_RAST(\"r_edge100_pct_buf100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_pct_buf100 not found in mapsets in search path: PERMANENT  # plot plot(r_core100, legend = FALSE, axes = FALSE, main = \"Core\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100' not found  plot(r_core100_id, legend = FALSE, axes = FALSE, main = \"Core id\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_id' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_id) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_id' not found  plot(r_core100_area_ha, legend = FALSE, axes = FALSE, main = \"Core area (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_area_ha' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_area_ha) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_area_ha' not found  plot(r_core100_area_ha_original, legend = FALSE, axes = FALSE, main = \"Core area original (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_area_ha_original' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_area_ha_original) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_area_ha_original' not found  plot(r_core100_core_number, legend = FALSE, axes = FALSE, main = \"Number of cores\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_core_number' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_core_number) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_core_number' not found  plot(r_core100_pct_buf100, legend = FALSE, axes = FALSE, main = \"Core percentage (buffer 100 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_pct_buf100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_pct_buf100, cex = .75) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_pct_buf100' not found   plot(r_edge100, legend = FALSE, axes = FALSE, main = \"Edge\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100' not found  plot(r_edge100_id, legend = FALSE, axes = FALSE, main = \"Edge id\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_id' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_id) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_id' not found  plot(r_edge100_area_ha, legend = FALSE, axes = FALSE, main = \"Edge area (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_area_ha' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_area_ha) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_area_ha' not found  plot(r_edge100_area_ha_original, legend = FALSE, axes = FALSE, main = \"Edge area original (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_area_ha_original' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_area_ha_original) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_area_ha_original' not found  plot(r_edge100_pct_buf100, legend = FALSE, axes = FALSE, main = \"Edge percentage (buffer 100 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_pct_buf100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_edge100_pct_buf100, cex = .75) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_pct_buf100' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_core_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the core and edge of landscape elements — lsm_core_edge","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"Identify core edge landscape elements pixel. Calculate area, original area percentage core edge.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_core_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"","code":"lsm_core_edge(   input,   output = NULL,   zero_as_null = FALSE,   edge_depth,   edge_contraction = \"maximum\",   core_edge_type = \"both\",   area_round_digits = 0,   area_unit = \"ha\",   map_id = FALSE,   map_ncell = FALSE,   map_area = FALSE,   map_core_edge_original = FALSE,   map_calculate_percentage = FALSE,   map_core_number = FALSE,   map_core_area_index = FALSE,   buffer_radius = NULL,   buffer_circular = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_core_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_null [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. edge_depth [numeric]  Integer indicating edge distance meters considered adjacent form patch. edge_contraction [character=\"\"] core_edge_type [character=\"\"] buffer_radius [numeric] buffer_circular [logical(1)=FALSE] nprocs [numeric()] memory [numeric()] ncell [logical(1)=FALSE]  TRUE area_integer [logical(1)=FALSE]  TRUE calculate_area [logical(1)=FALSE] calculate_percentage [logical(1)=FALSE] core_number [logical(1)=FALSE]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_core_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from file  # core and edge lsmetrics::lsm_core_edge(input = \"r\",                          edge_depth = 100,                          core_edge_type = \"both\",                          id = TRUE,                          core_number = TRUE,                          core_edge_original = TRUE,                          calculate_area = TRUE,                          calculate_percentage = TRUE,                          buffer_radius = 100,                          buffer_circular = FALSE) #> Error in lsmetrics::lsm_core_edge(input = \"r\", edge_depth = 100, core_edge_type = \"both\",     id = TRUE, core_number = TRUE, core_edge_original = TRUE,     calculate_area = TRUE, calculate_percentage = TRUE, buffer_radius = 100,     buffer_circular = FALSE): unused arguments (id = TRUE, core_number = TRUE, core_edge_original = TRUE, calculate_area = TRUE, calculate_percentage = TRUE)  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_core100 <- rgrass::read_RAST(\"r_core100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100 not found in mapsets in search path: PERMANENT r_core100_id <- rgrass::read_RAST(\"r_core100_id\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_id not found in mapsets in search path: PERMANENT r_core100_area_ha <- rgrass::read_RAST(\"r_core100_area_ha\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_area_ha not found in mapsets in search path: PERMANENT r_core100_area_ha_original <- rgrass::read_RAST(\"r_core100_area_ha_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_area_ha_original not found in mapsets in search path: PERMANENT r_core100_core_number <- rgrass::read_RAST(\"r_core100_core_number_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_core_number_original not found in mapsets in search path: PERMANENT r_core100_pct_buf100 <- rgrass::read_RAST(\"r_core100_pct_buf100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_pct_buf100 not found in mapsets in search path: PERMANENT  r_edge100 <- rgrass::read_RAST(\"r_edge100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100 not found in mapsets in search path: PERMANENT r_edge100_id <- rgrass::read_RAST(\"r_edge100_id\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_id not found in mapsets in search path: PERMANENT r_edge100_area_ha <- rgrass::read_RAST(\"r_edge100_area_ha\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_area_ha not found in mapsets in search path: PERMANENT r_edge100_area_ha_original <- rgrass::read_RAST(\"r_edge100_area_ha_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_area_ha_original not found in mapsets in search path: PERMANENT r_edge100_pct_buf100 <- rgrass::read_RAST(\"r_edge100_pct_buf100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_pct_buf100 not found in mapsets in search path: PERMANENT  # plot plot(r_core100, legend = FALSE, axes = FALSE, main = \"Core\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100' not found  plot(r_core100_id, legend = FALSE, axes = FALSE, main = \"Core id\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_id' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_id) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_id' not found  plot(r_core100_area_ha, legend = FALSE, axes = FALSE, main = \"Core area (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_area_ha' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_area_ha) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_area_ha' not found  plot(r_core100_area_ha_original, legend = FALSE, axes = FALSE, main = \"Core area original (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_area_ha_original' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_area_ha_original) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_area_ha_original' not found  plot(r_core100_core_number, legend = FALSE, axes = FALSE, main = \"Number of cores\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_core_number' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_core_number) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_core_number' not found  plot(r_core100_pct_buf100, legend = FALSE, axes = FALSE, main = \"Core percentage (buffer 100 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_pct_buf100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_pct_buf100, cex = .75) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_pct_buf100' not found   plot(r_edge100, legend = FALSE, axes = FALSE, main = \"Edge\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100' not found  plot(r_edge100_id, legend = FALSE, axes = FALSE, main = \"Edge id\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_id' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_id) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_id' not found  plot(r_edge100_area_ha, legend = FALSE, axes = FALSE, main = \"Edge area (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_area_ha' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_area_ha) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_area_ha' not found  plot(r_edge100_area_ha_original, legend = FALSE, axes = FALSE, main = \"Edge area original (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_area_ha_original' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_area_ha_original) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_area_ha_original' not found  plot(r_edge100_pct_buf100, legend = FALSE, axes = FALSE, main = \"Edge percentage (buffer 100 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_pct_buf100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_edge100_pct_buf100, cex = .75) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_pct_buf100' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fragment distance — lsm_distance","title":"Calculate fragment distance — lsm_distance","text":"Calculate distance inside outside fragments meters r.grow.distance GRASS GIS module.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fragment distance — lsm_distance","text":"","code":"lsm_distance(input, output = NULL, zero_as_null = FALSE, distance_type)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fragment distance — lsm_distance","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  fragment area map name inside GRASS Data Base. zero_as_null [logical=\"\"] distance_type [character=\"\"] distance_metric [character=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fragment distance — lsm_distance","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from memory  # distance lsmetrics::lsm_distance(input = \"r\", distance_type = \"both\") #> Error in lsmetrics::lsm_distance(input = \"r\", distance_type = \"both\"): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import from grass to r r_distance_inside <- terra::rast(rgrass::read_RAST(\"r_distance_inside\", flags = \"quiet\", return_format = \"SGDF\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rast': r_distance_inside not found in mapsets in search path: PERMANENT r_distance_outside <- terra::rast(rgrass::read_RAST(\"r_distance_outside\", flags = \"quiet\", return_format = \"SGDF\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rast': r_distance_outside not found in mapsets in search path: PERMANENT  # plot plot(r_distance_inside, legend = FALSE, axes = FALSE, main = \"Distance inside (m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_distance_inside' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_distance_inside, cex = .5) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_distance_inside' not found  plot(r_distance_outside, legend = FALSE, axes = FALSE, main = \"Distance outside (m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_distance_outside' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_distance_outside, cex = .5) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_distance_outside' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_distance_enn.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fragment euclidean nearest neighbor distance — lsm_distance_enn","title":"Calculate fragment euclidean nearest neighbor distance — lsm_distance_enn","text":"Calculate euclidean nearest neighbor distance among fragments meters using r.clump r.distance GRASS GIS module.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_distance_enn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fragment euclidean nearest neighbor distance — lsm_distance_enn","text":"","code":"lsm_distance_enn(   input,   output = NULL,   zero_as_null = FALSE,   id_direction = 8,   distance_round_digit = 0,   grid_size = 10000,   distance_radius = 2000,   table_distance = FALSE )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_distance_enn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fragment euclidean nearest neighbor distance — lsm_distance_enn","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Fragment fragment euclidean nearest neighbor distance map name inside GRASS Data Base. zero_as_null [logical=\"\"] table_distance [logical=\"\"] id_directions [numerical=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_distance_enn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fragment euclidean nearest neighbor distance — lsm_distance_enn","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from memory  # distance lsmetrics::lsm_distance_enn(input = \"r\") #> Error in lsmetrics::lsm_distance_enn(input = \"r\"): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import from grass to r r_distance_enn <- terra::rast(rgrass::read_RAST(\"r_distance_enn\", flags = \"quiet\", return_format = \"SGDF\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rast': r_distance_enn not found in mapsets in search path: PERMANENT  # plot plot(r_distance_enn, legend = FALSE, axes = FALSE, main = \"Euclidean nearest neighbor distance (m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_distance_enn' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_distance_enn, cex = .5) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_distance_enn' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate landscape diversity — lsm_diversity","title":"Calculate landscape diversity — lsm_diversity","text":"Calculate landscape diversity using r.diversity module.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate landscape diversity — lsm_diversity","text":"","code":"lsm_diversity(   input,   output = NULL,   buffer_radius,   diversity_index,   alpha = NULL )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate landscape diversity — lsm_diversity","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Habitat map output name inside GRASS Data Base. buffer_radius [numeric()]  Integer indicating window size. diversity_index [character=\"\"]  Integer indicating window size. alpha [character=\"\"]  Integer indicating window size.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate landscape diversity — lsm_diversity","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\", values_type = \"multiclass\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Classes\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\"), vname = \"r\") #> Over-riding projection check #> Importing raster map <r>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> SpatRaster read into GRASS using r.in.gdal from memory  # diversity lsmetrics::lsm_diversity(input = \"r\", diversity_index = \"shannon\", buffer_radius = 100) #> Error in lsmetrics::lsm_diversity(input = \"r\", diversity_index = \"shannon\",     buffer_radius = 100): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import from grass to r r_div_buf100 <- rgrass::read_RAST(\"r_diversity_shannon_buffer100\", flags = c(\"c\", \"quiet\"), return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_diversity_shannon_buffer100 not found in mapsets in search path: PERMANENT  # plot plot(r_div_buf100, legend = FALSE, axes = FALSE, main = \"Landscape diversity (Shannon) (buffer 100 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_div_buf100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE)  text(r_div_buf100, digits = 1, cex = .75) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_div_buf100' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_diversity_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate landscape diversity — lsm_diversity_parallel","title":"Calculate landscape diversity — lsm_diversity_parallel","text":"Calculate landscape diversity using r.diversity module.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_diversity_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate landscape diversity — lsm_diversity_parallel","text":"","code":"lsm_diversity_parallel(   input,   output = NULL,   buffer_radius,   diversity_index,   alpha = NULL,   grid_size,   grid_delete = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_diversity_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate landscape diversity — lsm_diversity_parallel","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Habitat map output name inside GRASS Data Base. buffer_radius [numeric()]  Integer indicating window size. diversity_index [character=\"\"]  Integer indicating window size. grid_size [numeric()]  Integer indicating window size. grid_delete [numeric()]  Integer indicating window size. nprocs [numeric()] memory [numeric()]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_diversity_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate landscape diversity — lsm_diversity_parallel","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\", values_type = \"multiclass\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Classes\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\"), vname = \"r\") #> Over-riding projection check #> Importing raster map <r>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> SpatRaster read into GRASS using r.in.gdal from memory  # diversity lsmetrics::lsm_diversity_parallel(input = \"r\",                                   diversity_index = \"shannon\",                                   buffer_radius = 100,                                   grid_size = 1000,                                   grid_delete = FALSE,                                   nprocs = 1,                                   memory = 300) #> [1] \"1 of 4\" #> r.li.shannon complete. Raster map <r1_diversity_shannon_buffer100> created. #> [1] \"2 of 4\" #> r.li.shannon complete. Raster map <r2_diversity_shannon_buffer100> created. #> [1] \"3 of 4\" #> r.li.shannon complete. Raster map <r3_diversity_shannon_buffer100> created. #> [1] \"4 of 4\" #> r.li.shannon complete. Raster map <r4_diversity_shannon_buffer100> created. #> Cleaning data  # files rgrass::execGRASS(cmd = \"g.list\", type = \"vector\") #> grid #> grid_sel rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r #> r_diversity_shannon_buffer100  # import from grass to r v <- rgrass::read_VECT(\"grid\", flags = \"quiet\") r_div_buf100 <- rgrass::read_RAST(\"r_diversity_shannon_buffer100\", flags = c(\"c\", \"quiet\"), return_format = \"terra\")  # plot plot(r_div_buf100, legend = FALSE, axes = FALSE, main = \"Landscape diversity (Shannon) (buffer 100 m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(v, lwd = 3, border = \"blue\", add = TRUE) text(v, cex = 3, col = \"blue\") text(r_div_buf100, digits = 1, cex = .75)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify edge of landscape elements — lsm_edge","title":"Identify edge of landscape elements — lsm_edge","text":"Identify edge landscape elements pixel. Calculate area, original area percentage.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify edge of landscape elements — lsm_edge","text":"","code":"lsm_edge(   input,   output = NULL,   zero_as_null = FALSE,   edge_depth,   edge_contraction = \"maximum\",   area_round_digits = 0,   area_unit = \"ha\",   map_edge_id = FALSE,   map_edge_ncell = FALSE,   map_edge_area = FALSE,   map_edge_id_original = FALSE,   map_edge_ncell_original = FALSE,   map_edge_area_original = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify edge of landscape elements — lsm_edge","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_null [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. edge_depth [numeric]  Integer indicating edge distance meters considered adjacent form patch. edge_contraction [character=\"\"] area_round_digits [logical(1)=FALSE]  TRUE area_unit [logical(1)=FALSE]  TRUE map_edge_id [logical(1)=FALSE] map_edge_ncell [logical(1)=FALSE] map_edge_area [logical(1)=FALSE] map_edge_id_original [logical(1)=FALSE] map_edge_ncell_original [logical(1)=FALSE] map_edge_area_original [logical(1)=FALSE] nprocs [numeric()] memory [numeric()] map_edge_percentage [logical(1)=FALSE] buffer_radius [numeric] buffer_circular [logical(1)=FALSE]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify edge of landscape elements — lsm_edge","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from memory  # core and edge lsmetrics::lsm_core_edge(input = \"r\",                          edge_depth = 100,                          core_edge_type = \"both\",                          id = TRUE,                          core_number = TRUE,                          core_edge_original = TRUE,                          calculate_area = TRUE,                          calculate_percentage = TRUE,                          buffer_radius = 100,                          buffer_circular = FALSE) #> Error: 'lsm_core_edge' is not an exported object from 'namespace:lsmetrics'  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_core100 <- rgrass::read_RAST(\"r_core100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100 not found in mapsets in search path: PERMANENT r_core100_id <- rgrass::read_RAST(\"r_core100_id\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_id not found in mapsets in search path: PERMANENT r_core100_area_ha <- rgrass::read_RAST(\"r_core100_area_ha\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_area_ha not found in mapsets in search path: PERMANENT r_core100_area_ha_original <- rgrass::read_RAST(\"r_core100_area_ha_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_area_ha_original not found in mapsets in search path: PERMANENT r_core100_core_number <- rgrass::read_RAST(\"r_core100_core_number_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_core_number_original not found in mapsets in search path: PERMANENT r_core100_pct_buf100 <- rgrass::read_RAST(\"r_core100_pct_buf100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_core100_pct_buf100 not found in mapsets in search path: PERMANENT  r_edge100 <- rgrass::read_RAST(\"r_edge100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100 not found in mapsets in search path: PERMANENT r_edge100_id <- rgrass::read_RAST(\"r_edge100_id\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_id not found in mapsets in search path: PERMANENT r_edge100_area_ha <- rgrass::read_RAST(\"r_edge100_area_ha\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_area_ha not found in mapsets in search path: PERMANENT r_edge100_area_ha_original <- rgrass::read_RAST(\"r_edge100_area_ha_original\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_area_ha_original not found in mapsets in search path: PERMANENT r_edge100_pct_buf100 <- rgrass::read_RAST(\"r_edge100_pct_buf100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_edge100_pct_buf100 not found in mapsets in search path: PERMANENT  # plot plot(r_core100, legend = FALSE, axes = FALSE, main = \"Core\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100' not found  plot(r_core100_id, legend = FALSE, axes = FALSE, main = \"Core id\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_id' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_id) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_id' not found  plot(r_core100_area_ha, legend = FALSE, axes = FALSE, main = \"Core area (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_area_ha' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_area_ha) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_area_ha' not found  plot(r_core100_area_ha_original, legend = FALSE, axes = FALSE, main = \"Core area original (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_area_ha_original' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_area_ha_original) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_area_ha_original' not found  plot(r_core100_core_number, legend = FALSE, axes = FALSE, main = \"Number of cores\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_core_number' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_core_number) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_core_number' not found  plot(r_core100_pct_buf100, legend = FALSE, axes = FALSE, main = \"Core percentage (buffer 100 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_core100_pct_buf100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_pct_buf100, cex = .75) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_core100_pct_buf100' not found   plot(r_edge100, legend = FALSE, axes = FALSE, main = \"Edge\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100' not found  plot(r_edge100_id, legend = FALSE, axes = FALSE, main = \"Edge id\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_id' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_id) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_id' not found  plot(r_edge100_area_ha, legend = FALSE, axes = FALSE, main = \"Edge area (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_area_ha' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_area_ha) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_area_ha' not found  plot(r_edge100_area_ha_original, legend = FALSE, axes = FALSE, main = \"Edge area original (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_area_ha_original' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_area_ha_original) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_area_ha_original' not found  plot(r_edge100_pct_buf100, legend = FALSE, axes = FALSE, main = \"Edge percentage (buffer 100 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_edge100_pct_buf100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_edge100_pct_buf100, cex = .75) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_edge100_pct_buf100' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_enn_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fragment euclidean nearest neighbor distance — lsm_enn_distance","title":"Calculate fragment euclidean nearest neighbor distance — lsm_enn_distance","text":"Calculate euclidean nearest neighbor distance among fragments meters using r.clump r.distance GRASS GIS module.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_enn_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fragment euclidean nearest neighbor distance — lsm_enn_distance","text":"","code":"lsm_enn_distance(   input,   output = NULL,   directions = 8,   zero_as_na = FALSE,   export_table = FALSE )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_enn_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fragment euclidean nearest neighbor distance — lsm_enn_distance","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Fragment fragment euclidean nearest neighbor distance map name inside GRASS Data Base. directions [numerical=\"\"] zero_as_na [logical=\"\"] export_table [logical=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_enn_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fragment euclidean nearest neighbor distance — lsm_enn_distance","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from file  # distance lsmetrics::lsm_enn_distance(input = \"r\", zero_as_na = FALSE) #> Converting zero as null #> Identifying fragments #> Calculating distance #> Changing the raster color #> Cleaning files #> WARNING: Raster map <r_enn_distance_clump@PERMANENT> is a base map for #>          <r_enn_distance_temp@PERMANENT>. Remove forced.  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r #> r_enn_distance  # import from grass to r r_enn_distance <- terra::rast(rgrass::read_RAST(\"r_enn_distance\", flags = \"quiet\", return_format = \"SGDF\")) #> Creating BIL support files... #> Exporting raster as integer values (bytes=4) #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100%  # plot plot(r_enn_distance, legend = FALSE, axes = FALSE, main = \"Euclidean nearest neighbor distance (m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_enn_distance, cex = .5)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_enn_distance_fragment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fragment euclidean nearest neighbor distance — lsm_enn_distance_fragment","title":"Calculate fragment euclidean nearest neighbor distance — lsm_enn_distance_fragment","text":"Calculate euclidean nearest neighbor distance among fragments meters using r.clump r.distance GRASS GIS module, considering fragment.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_enn_distance_fragment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fragment euclidean nearest neighbor distance — lsm_enn_distance_fragment","text":"","code":"lsm_enn_distance_fragment(   input,   output = NULL,   directions = 8,   zero_as_na = FALSE,   export_table = FALSE,   buffer_fragment = 3000 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_enn_distance_fragment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fragment euclidean nearest neighbor distance — lsm_enn_distance_fragment","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Fragment fragment euclidean nearest neighbor distance map name inside GRASS Data Base. directions [numerical=\"\"] zero_as_na [logical=\"\"] export_table [logical=\"\"] buffer_fragment [numerical=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_enn_distance_fragment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fragment euclidean nearest neighbor distance — lsm_enn_distance_fragment","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from file  # distance lsmetrics::lsm_enn_distance_fragment(input = \"r\", zero_as_na = FALSE) #> Converting zero as null #> Identifying fragments #> Calculating distance #> Changing the raster color #> Cleaning files #> WARNING: Raster map <r_enn_distance_clump@PERMANENT> is a base map for #>          <r_enn_distance_temp@PERMANENT>. Remove forced.  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r #> r_enn_distance_fragment  # import from grass to r r_enn_distance_fragment <- terra::rast(rgrass::read_RAST(\"r_enn_distance_fragment\", flags = \"quiet\", return_format = \"SGDF\")) #> Creating BIL support files... #> Exporting raster as integer values (bytes=4) #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100%  # plot plot(r_enn_distance_fragment, legend = FALSE, axes = FALSE, main = \"Euclidean nearest neighbor distance by fragment (m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_enn_distance_fragment, cex = .5)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fragment area — lsm_fragment_area","title":"Calculate fragment area — lsm_fragment_area","text":"Identifies fragments calculates area hectare.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fragment area — lsm_fragment_area","text":"","code":"lsm_fragment_area(   input,   output = NULL,   zero_as_na = FALSE,   id = FALSE,   ncell = FALSE,   area_integer = FALSE,   raster = TRUE,   table = FALSE )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fragment area — lsm_fragment_area","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. id [logical(1)=FALSE] ncell [logical(1)=FALSE] area_integer [logical(1)=FALSE] #' raster [logical(1)=FALSE] #' table [logical(1)=FALSE] #'","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fragment area — lsm_fragment_area","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_fragment_area(input = \"r\", id = TRUE, table = TRUE) #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes #> Calculating the area of fragmentes in tables  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_fragment_id <- rgrass::read_RAST(\"r_fragment_id\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_fragment_id, legend = FALSE, axes = FALSE, main = \"Fragment id\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_id)   # import from grass to r r_fragment_area <- rgrass::read_RAST(\"r_fragment_area_ha\", flags = \"quiet\", return_format = \"terra\")  plot(r_fragment_area, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area)   # table da_fragment <- readr::read_csv(\"r_fragment.csv\", show_col_types = FALSE) da_fragment #> # A tibble: 6 × 2 #>      id area_ha #>   <dbl>   <dbl> #> 1     1       9 #> 2     2      25 #> 3     3      39 #> 4     4       2 #> 5     5      34 #> 6     6       1  da_fragment_summary <- readr::read_csv(\"r_fragment_summary.csv\", show_col_types = FALSE) da_fragment_summary #> # A tibble: 1 × 6 #>   n_frag area_ha_mean area_ha_sd area_ha_cv area_ha_max area_ha_min #>    <dbl>        <dbl>      <dbl>      <dbl>       <dbl>       <dbl> #> 1      6         18.3       16.6       90.3          39           1  # delete grassdb unlink(\"grassdb\", recursive = TRUE) unlink(\"r_fragment.csv\") unlink(\"r_fragment_summary.csv\")"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_fill_hole.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill holes in fragments — lsm_fragment_fill_hole","title":"Fill holes in fragments — lsm_fragment_fill_hole","text":"Fill holes fragments","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_fill_hole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill holes in fragments — lsm_fragment_fill_hole","text":"","code":"lsm_fragment_fill_hole(   input,   output = NULL,   zero_as_na = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_fill_hole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill holes in fragments — lsm_fragment_fill_hole","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. nprocs [numeric()] memory [numeric()]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_fill_hole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill holes in fragments — lsm_fragment_fill_hole","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # fill holes lsmetrics::lsm_fragment_fill_hole(input = \"r\") #> Converting zero as null #> Identifying the fragments #> Creating the matrix #> Filling the holes #> Changing the raster color  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_fragment_fill_hole <- rgrass::read_RAST(\"r_fragment_fill_hole\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_fragment_fill_hole, legend = FALSE, axes = FALSE, main = \"Fragment fill hole\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_fill_hole)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_fill_holes.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill holes in fragments — lsm_fragment_fill_holes","title":"Fill holes in fragments — lsm_fragment_fill_holes","text":"Fill holes fragments","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_fill_holes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill holes in fragments — lsm_fragment_fill_holes","text":"","code":"lsm_fragment_fill_holes(input, output = NULL, zero_as_na = FALSE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_fill_holes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill holes in fragments — lsm_fragment_fill_holes","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_fragment_fill_holes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill holes in fragments — lsm_fragment_fill_holes","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_fragment_fill_holes(input = \"r\", zero_as_na = FALSE) #> Converting zero as null #> Identifying the fragments #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  16%  33%  50%  66%  83% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 3 clumps. #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Changing the raster color  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_fragment_fill_holes <- rgrass::read_RAST(\"r_fragment_fill_holes\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_fragment_fill_holes, legend = FALSE, axes = FALSE, main = \"Fragment fill holes\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_fill_holes)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_functional_connectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate functional connectivity — lsm_functional_connectivity","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"Identifies functional fragmentes connected calculate area hectare.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_functional_connectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"","code":"lsm_functional_connectivity(   input,   output = NULL,   zero_as_na = FALSE,   gap_crossing,   id = FALSE,   ncell = FALSE,   area_integer = FALSE,   dilation = FALSE,   dilation_type = \"minimum\",   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_functional_connectivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Habitat area map name output GRASS Data Base zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. gap_crossing [numeric]  Integer indicating gap crossing distance. id [logical(1)=FALSE]  TRUE ncell [logical(1)=FALSE]  TRUE area_integer [logical(1)=FALSE]  TRUE dilation [logical(1)=FALSE]  TRUE dilation_type [character=\"\"]  nprocs [numeric()] memory [numeric()]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_functional_connectivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from file  # functional connectivity lsmetrics::lsm_functional_connectivity(input = \"r\", gap_crossing = 100, id = TRUE, dilation = TRUE) #> Dilation pixels #> Converting zero as null #> Identifying the fragmentes for gap crossing #> Multipling id by original habitat #> Counting the number of fragmentes #> Calculating the functional connected area #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes #> Removing extra rasters  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import do r r_functional_connected_area200_id <- rgrass::read_RAST(\"r_functional_connected_area200_id\", flags = \"quiet\", return_format = \"terra\") r_functional_connectivity_dilation200_null <- rgrass::read_RAST(\"r_functional_connectivity_dilation200_null\", flags = \"quiet\", return_format = \"terra\")  plot(r_functional_connectivity_dilation200_null, legend = FALSE, axes = FALSE,      main = \"Functional connected area id (200 m)\") plot(r_functional_connected_area200_id, legend = FALSE, axes = FALSE, add = TRUE) plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_functional_connected_area200_id)   # import to r r_functional_connected_area200 <- rgrass::read_RAST(\"r_functional_connected_area200\", flags = \"quiet\", return_format = \"terra\")  plot(r_functional_connectivity_dilation200_null, legend = FALSE, axes = FALSE,      main = \"Functional connected area (ha) (200 m)\") plot(r_functional_connected_area200, legend = FALSE, axes = FALSE, add = TRUE) plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_functional_connected_area200)   # import to r r_functional_connectivity200 <- rgrass::read_RAST(\"r_functional_connectivity200\", flags = \"quiet\", return_format = \"terra\")  plot(r_functional_connectivity_dilation200_null, legend = FALSE, axes = FALSE,      main = \"Functional connectivity (ha) (200 m)\") plot(r_functional_connectivity200, legend = FALSE, axes = FALSE, add = TRUE) plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_functional_connectivity200)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_grid_statistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create grids and calculate statistics — lsm_grid_statistic","title":"Create grids and calculate statistics — lsm_grid_statistic","text":"Create grids calculate statistics","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_grid_statistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create grids and calculate statistics — lsm_grid_statistic","text":"","code":"lsm_grid_statistic(   input,   output = NULL,   landscape_metric,   landscape_metric_has_null = FALSE,   size,   hexagon = FALSE,   column_prefix,   method = \"average\",   percentile = NULL )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_grid_statistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create grids and calculate statistics — lsm_grid_statistic","text":"input [character=\"\"] output [character=\"\"]  Map name output inside GRASS Data Base. landscape_metric [character=\"\"] landscape_metric_has_null [character=\"\"] size [character=\"\"] hexagon [character=\"\"] column_prefix [character=\"\"] method [character=\"\"]  Univariate statistics: number, null_cells, minimum ,maximum, range, average, stddev, variance, coeff_var, sum, first_quartile ,median, third_quartile, percentile percentile [character=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_grid_statistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create grids and calculate statistics — lsm_grid_statistic","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_fragment_area(input = \"r\") #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import r r_fragment_area_ha <- rgrass::read_RAST(\"r_fragment_area_ha\", flags = \"quiet\")  # plot plot(r_fragment_area_ha, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area_ha)   # grid lsmetrics::lsm_grid_statistic(input = \"r\",                               landscape_metric = \"r_fragment_area_ha\",                               landscape_metric_has_null = TRUE,                               size = 200,                               hexagon = TRUE,                               column_prefix = \"area\",                               method = \"average\") #> Using native format #> Default driver / database set to: #> driver: sqlite #> database: $GISDBASE/$LOCATION_NAME/$MAPSET/sqlite/sqlite.db #> The number of columns has been adjusted from 10 to 11 #> Writing out hexagon grid... #>    0%  10%  21%  31%  42%  52%  63%  73%  84%  94% 100% #> Building topology for vector map <r_grid200@PERMANENT>... #> Registering primitives... #>  #> 461 primitives registered #> 817 vertices registered #> Building areas... #>    0%   2%   4%   6%   8%  10%  12%  14%  16%  18%  20%  22%  24%  26%  28%  30%  32%  34%  36%  38%  40%  42%  44%  46%  48%  50%  52%  54%  56%  58%  60%  62%  64%  66%  68%  70%  72%  74%  76%  78%  80%  82%  84%  86%  88%  90%  92%  94%  96%  98% 100% #> 105 areas built #> One isle built #> Attaching islands... #>    0% 100% #> Attaching centroids... #>    0%   2%   4%   6%   8%  10%  12%  14%  16%  18%  20%  22%  24%  26%  28%  30%  32%  34%  36%  38%  40%  42%  44%  46%  48%  50%  52%  54%  56%  58%  60%  62%  64%  66%  68%  70%  72%  74%  76%  78%  80%  82%  84%  86%  88%  90%  92%  94%  96%  98% 100% #> Topology was built #> Number of nodes: 252 #> Number of primitives: 461 #> Number of points: 0 #> Number of lines: 0 #> Number of boundaries: 356 #> Number of centroids: 105 #> Number of areas: 105 #> Number of isles: 1  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"vector\")  # import r r_grid <- rgrass::read_VECT(\"r_grid200\", flags = \"quiet\")  # plot r_grid <- r_grid[is.na(r_grid$area_average) == FALSE, ] plot(r_grid, \"area_average\", legend = FALSE, axes = FALSE, main = \"Area average (ha)\") text(r_grid, labels = \"area_average\", cex = .7) plot(as.polygons(r), col = c(adjustcolor(\"white\", 0), adjustcolor(\"gray\", .5)), add = TRUE)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_grid_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create grids and calculate statistics — lsm_grid_statistics","title":"Create grids and calculate statistics — lsm_grid_statistics","text":"Create grids calculate statistics","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_grid_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create grids and calculate statistics — lsm_grid_statistics","text":"","code":"lsm_grid_statistics(   input,   output = NULL,   landscape_metric,   landscape_metric_has_null = FALSE,   size,   hexagon = FALSE,   column_prefix,   method = \"average\",   percentile = NULL )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_grid_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create grids and calculate statistics — lsm_grid_statistics","text":"input [character=\"\"] output [character=\"\"]  Map name output inside GRASS Data Base. landscape_metric [character=\"\"] landscape_metric_has_null [character=\"\"] size [character=\"\"] hexagon [character=\"\"] column_prefix [character=\"\"] method [character=\"\"]  Univariate statistics: number, null_cells, minimum ,maximum, range, average, stddev, variance, coeff_var, sum, first_quartile ,median, third_quartile, percentile percentile [character=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_grid_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create grids and calculate statistics — lsm_grid_statistics","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_fragment_area(input = \"r\", zero_as_na = FALSE) #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import r r_fragment_area_ha <- rgrass::read_RAST(\"r_fragment_area_ha\", flags = \"quiet\")  # plot plot(r_fragment_area_ha, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area_ha)   # grid lsmetrics::lsm_grid_statistics(input = \"r\",                                landscape_metric = \"r_fragment_area_ha\",                                landscape_metric_has_null = TRUE,                                size = 200,                                hexagon = TRUE,                                column_prefix = \"area\",                                method = \"average\") #> Using native format #> Default driver / database set to: #> driver: sqlite #> database: $GISDBASE/$LOCATION_NAME/$MAPSET/sqlite/sqlite.db #> The number of columns has been adjusted from 10 to 11 #> Writing out hexagon grid... #>    0%  10%  21%  31%  42%  52%  63%  73%  84%  94% 100% #> Building topology for vector map <r_grid200@PERMANENT>... #> Registering primitives... #>  #> 461 primitives registered #> 817 vertices registered #> Building areas... #>    0%   2%   4%   6%   8%  10%  12%  14%  16%  18%  20%  22%  24%  26%  28%  30%  32%  34%  36%  38%  40%  42%  44%  46%  48%  50%  52%  54%  56%  58%  60%  62%  64%  66%  68%  70%  72%  74%  76%  78%  80%  82%  84%  86%  88%  90%  92%  94%  96%  98% 100% #> 105 areas built #> One isle built #> Attaching islands... #>    0% 100% #> Attaching centroids... #>    0%   2%   4%   6%   8%  10%  12%  14%  16%  18%  20%  22%  24%  26%  28%  30%  32%  34%  36%  38%  40%  42%  44%  46%  48%  50%  52%  54%  56%  58%  60%  62%  64%  66%  68%  70%  72%  74%  76%  78%  80%  82%  84%  86%  88%  90%  92%  94%  96%  98% 100% #> Topology was built #> Number of nodes: 252 #> Number of primitives: 461 #> Number of points: 0 #> Number of lines: 0 #> Number of boundaries: 356 #> Number of centroids: 105 #> Number of areas: 105 #> Number of isles: 1 #> Processing input data (105 categories)... #> Adding columns '['area_average DOUBLE PRECISION']' #> Adding column <area_average> to the table #>    0%   5%  10%  15%  20%  25%  30%  35%  40%  45%  50%  55%  60%  65%  70%  75%  80%  85%  90%  95% 100% #> Updating the database ... #> Statistics calculated from raster map <r_fragment_area_ha_zero> and #> uploaded to attribute table of vector map <r_grid200>. #> Converting color rules into categories... #>    0%   3%   6%   9%  12%  15%  18%  21%  24%  27%  30%  33%  36%  39%  42%  45%  48%  51%  54%  57%  60%  63%  66%  69%  72%  75%  78%  81%  84%  87%  90%  93%  96%  99% 100% #> Writing color rules... #> Color table for vector map <r_grid200@PERMANENT> set to 'viridis'  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"vector\")  # import r r_grid <- rgrass::read_VECT(\"r_grid200\", flags = \"quiet\")  # plot r_grid <- r_grid[is.na(r_grid$area_average) == FALSE, ] plot(r_grid, \"area_average\", legend = FALSE, axes = FALSE, main = \"Area average (ha)\") text(r_grid, labels = \"area_average\", cex = .7)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_morphology.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifies landscape morphological — lsm_morphology","title":"Identifies landscape morphological — lsm_morphology","text":"Identifies landscape morphological: matrix, core, edge, corridor, stepping stone, branch, perforation","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_morphology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifies landscape morphological — lsm_morphology","text":"","code":"lsm_morphology(   input,   output = NULL,   zero_as_null = FALSE,   morphology = \"all\",   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_morphology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifies landscape morphological — lsm_morphology","text":"input [character=\"\"]  Habitat map, following binary classification  (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. morphology [character=\"\"] nprocs [numeric()] memory [numeric()] zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_morphology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identifies landscape morphological — lsm_morphology","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # morphology lsmetrics::lsm_morphology(input = \"r\") #> Error in lsmetrics::lsm_morphology(input = \"r\"): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import from grass to r r_morphology <- rgrass::read_RAST(\"r_morphology\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_morphology not found in mapsets in search path: PERMANENT r_morphology_matrix <- rgrass::read_RAST(\"r_morphology_matrix\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_morphology_matrix not found in mapsets in search path: PERMANENT r_morphology_core <- rgrass::read_RAST(\"r_morphology_core\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_morphology_core not found in mapsets in search path: PERMANENT r_morphology_edge <- rgrass::read_RAST(\"r_morphology_edge\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_morphology_edge not found in mapsets in search path: PERMANENT r_morphology_corridor <- rgrass::read_RAST(\"r_morphology_corridor\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_morphology_corridor not found in mapsets in search path: PERMANENT r_morphology_branch <- rgrass::read_RAST(\"r_morphology_branch\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_morphology_branch not found in mapsets in search path: PERMANENT r_morphology_stepping_stone <- rgrass::read_RAST(\"r_morphology_stepping_stone\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_morphology_stepping_stone not found in mapsets in search path: PERMANENT r_morphology_perforation <- rgrass::read_RAST(\"r_morphology_perforation\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_morphology_perforation not found in mapsets in search path: PERMANENT  # plot plot(r_morphology, legend = FALSE, axes = FALSE, main = \"Morphology\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_morphology' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_morphology) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_morphology' not found  plot(r_morphology_matrix, legend = FALSE, axes = FALSE, main = \"Matrix\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_morphology_matrix' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_morphology_matrix) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_morphology_matrix' not found  plot(r_morphology_core, legend = FALSE, axes = FALSE, main = \"Core\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_morphology_core' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_morphology_core) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_morphology_core' not found  plot(r_morphology_edge, legend = FALSE, axes = FALSE, main = \"Edge\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_morphology_edge' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_morphology_edge) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_morphology_edge' not found  plot(r_morphology_corridor, legend = FALSE, axes = FALSE, main = \"Corridor\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_morphology_corridor' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_morphology_corridor) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_morphology_corridor' not found  plot(r_morphology_branch, legend = FALSE, axes = FALSE, main = \"Branch\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_morphology_branch' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_morphology_branch) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_morphology_branch' not found  plot(r_morphology_stepping_stone, legend = FALSE, axes = FALSE, main = \"Stepping stone\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_morphology_stepping_stone' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_morphology_stepping_stone) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_morphology_stepping_stone' not found  plot(r_morphology_perforation, legend = FALSE, axes = FALSE, main = \"Perforation\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_morphology_perforation' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_morphology_perforation) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_morphology_perforation' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_patch_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate patch area — lsm_patch_area","title":"Calculate patch area — lsm_patch_area","text":"Identifies patch calculates area hectare.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_patch_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate patch area — lsm_patch_area","text":"","code":"lsm_patch_area(   input,   output = NULL,   zero_as_na = FALSE,   id = FALSE,   ncell = FALSE,   area_integer = FALSE,   patch_original = FALSE,   patch_number = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_patch_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate patch area — lsm_patch_area","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. id [logical(1)=FALSE]  TRUE ncell [logical(1)=FALSE]  TRUE area_integer [logical(1)=FALSE]  TRUE patch_original [logical(1)=FALSE]  TRUE patch_number [logical(1)=FALSE]  TRUE nprocs [numeric()] memory [numeric()]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_patch_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate patch area — lsm_patch_area","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # patch area lsmetrics::lsm_patch_area(input = \"r\", id = TRUE, patch_original = TRUE, patch_number = TRUE) #> Converting zero as null #> Converting null as zero #> Identifying the patches #> Converting zero as null #> Identifying the fragments #> Creating the matrix #> Filling the holes #> Changing the raster color #> Counting the cell number of patches #> Calculating the area of patches #> Changing the raster color #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Cleaning rasters  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_patch_id <- rgrass::read_RAST(\"r_patch_id\", flags = \"quiet\", return_format = \"terra\")  plot(r_patch_id, legend = FALSE, axes = FALSE, main = \"Patch id\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_id)   r_patch_area <- rgrass::read_RAST(\"r_patch_area_ha\", flags = \"quiet\", return_format = \"terra\")  plot(r_patch_area, legend = FALSE, axes = FALSE, main = \"Patch area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_area)   r_patch_area_original <- rgrass::read_RAST(\"r_patch_area_ha_original\", flags = \"quiet\", return_format = \"terra\")  plot(r_patch_area_original, legend = FALSE, axes = FALSE, main = \"Patch area original (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_area_original)   r_patch_number_original <- rgrass::read_RAST(\"r_patch_number_original\", flags = \"quiet\", return_format = \"terra\")  plot(r_patch_number_original, legend = FALSE, axes = FALSE, main = \"Number of patch (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_number_original)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fragment percentage — lsm_percentage","title":"Calculate fragment percentage — lsm_percentage","text":"Calculate focal (\"moving window\") values cell using mean r.neighbors module multiplies 100.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fragment percentage — lsm_percentage","text":"","code":"lsm_percentage(   input,   output = NULL,   zero_as_na = FALSE,   buffer_radius,   buffer_circular = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fragment percentage — lsm_percentage","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Habitat map output name inside GRASS Data Base. zero_as_na [logical=\"\"] buffer_radius [numeric()]  Integer indicating window size. nprocs [numeric()] memory [numeric()] buffer_cirular [logical=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fragment percentage — lsm_percentage","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\"), vname = \"r\") #> Over-riding projection check #> Importing raster map <r>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> SpatRaster read into GRASS using r.in.gdal from memory  # percentage lsmetrics::lsm_percentage(input = \"r\", buffer_radius = 100) #> Error in lsmetrics::lsm_percentage(input = \"r\", buffer_radius = 100): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import from grass to r r_pct_buf100 <- rgrass::read_RAST(\"r_pct_buf100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_pct_buf100 not found in mapsets in search path: PERMANENT  # plot plot(r_pct_buf100, legend = FALSE, axes = FALSE, main = \"Habitat percentage (buffer 100 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_pct_buf100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_pct_buf100, cex = .75) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_pct_buf100' not found  # percentage 300 m lsmetrics::lsm_percentage(input = \"r\", buffer_radius = 300) #> Error in lsmetrics::lsm_percentage(input = \"r\", buffer_radius = 300): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import from grass to r r_pct_buf300 <- rgrass::read_RAST(\"r_pct_buf300\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_pct_buf300 not found in mapsets in search path: PERMANENT  # plot plot(r_pct_buf300, legend = FALSE, axes = FALSE, main = \"Habitat percentage (buffer 300 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_pct_buf300' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_pct_buf300, cex = .75) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_pct_buf300' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate percentage using parallel computing — lsm_percentage_parallel","title":"Calculate percentage using parallel computing — lsm_percentage_parallel","text":"Calculate focal (\"moving window\") values cell using mean r.neighbors module multiplies 100.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate percentage using parallel computing — lsm_percentage_parallel","text":"","code":"lsm_percentage_parallel(   input,   output = NULL,   zero_as_null = FALSE,   buffer_radius,   buffer_circular = FALSE,   grid_size,   grid_delete = TRUE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate percentage using parallel computing — lsm_percentage_parallel","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Habitat map output name inside GRASS Data Base. zero_as_null [logical=\"\"] buffer_radius [numeric()]  Integer indicating window size. grid_size [numeric()]  Integer indicating window size. nprocs [numeric()] memory [numeric()] buffer_cirular [logical=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate percentage using parallel computing — lsm_percentage_parallel","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\"), vname = \"r\") #> Over-riding projection check #> Importing raster map <r>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> SpatRaster read into GRASS using r.in.gdal from memory  # percentage lsmetrics::lsm_percentage_parallel(input = \"r\",                                    buffer_radius = 100,                                    grid_size = 1000,                                    grid_delete = FALSE,                                    nprocs = 1,                                    memory = 300) #> Error in lsmetrics::lsm_percentage_parallel(input = \"r\", buffer_radius = 100,     grid_size = 1000, grid_delete = FALSE, nprocs = 1, memory = 300): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r rgrass::execGRASS(cmd = \"g.list\", type = \"vector\")  # import from grass to r v <- rgrass::read_VECT(\"r_grid\", flags = \"quiet\") #> Error in execGRASS(\"v.info\", flags = \"t\", map = vname, layer = layer,     intern = TRUE, ignore.stderr = ignore.stderr): The command: #> v.info -t map=r_grid layer=1 #> produced an error (1) during execution: #> ERROR: Vector map <r_grid> not found r_pct_buf100 <- rgrass::read_RAST(\"r_pct_buf100\", flags = \"quiet\", return_format = \"terra\") #> Error in sanitize_layername(name = vname[i], type = \"raster\", mapsets = msp,     ignore.stderr = ignore.stderr): r_pct_buf100 not found in mapsets in search path: PERMANENT  # plot plot(r_pct_buf100, legend = FALSE, axes = FALSE, main = \"Habitat percentage (buffer 100 m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_pct_buf100' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  plot(v, lwd = 3, border = \"blue\", add = TRUE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'v' not found text(v, cex = 3, col = \"blue\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'v' not found text(r_pct_buf100, cex = .75) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_pct_buf100' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate percentage table — lsm_percentage_table","title":"Calculate percentage table — lsm_percentage_table","text":"Identifies percentage table.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate percentage table — lsm_percentage_table","text":"","code":"lsm_percentage_table(   input,   output = NULL,   multi_class = TRUE,   binary_habitat_classes )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate percentage table — lsm_percentage_table","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) multi-class map inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. multi_class [logical(1)=FALSE] class_number_habitat [numeric]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_percentage_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate percentage table — lsm_percentage_table","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\"), vname = \"r\") #> Over-riding projection check #> Importing raster map <r>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> SpatRaster read into GRASS using r.in.gdal from memory  # percentage lsmetrics::lsm_percentage_table(input = \"r\") #> Error in lsmetrics::lsm_percentage_table(input = \"r\"): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import from grass to r da_pct <- readr::read_csv(\"r_percentage.csv\") #> Error: 'r_percentage.csv' does not exist in current working directory ('/home/mude/data/github/mauriciovancine/lsmetrics/docs/reference'). da_pct #> Error: object 'da_pct' not found  # delete file unlink(\"r_percentage.csv\")  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_perimeter.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate perimeter — lsm_perimeter","title":"Calculate perimeter — lsm_perimeter","text":"Calculate perimeter meters shape index.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_perimeter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate perimeter — lsm_perimeter","text":"","code":"lsm_perimeter(   input,   output = NULL,   zero_as_null = FALSE,   perimeter_round_digit = 0,   map_perimeter_area_ratio_index = FALSE,   map_shape_index = FALSE,   map_fractal_index = FALSE,   nprocs = 1,   memory = 300 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_perimeter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate perimeter — lsm_perimeter","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_null [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. map_perimeter_area_ratio_index [character=\"\"]  TRUE, function treats. map_shape_index [character=\"\"]  TRUE, function treats. map_fractal_index [character=\"\"]  TRUE, function treats.#' @param nprocs [numeric()] nprocs [numeric()] memory [numeric()]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_perimeter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate perimeter — lsm_perimeter","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # perimeter lsmetrics::lsm_perimeter(input = \"r\",                          map_perimeter_area_ratio_index = TRUE,                          map_shape_index = TRUE,                          map_fractal_index = TRUE) #> Error in lsmetrics::lsm_perimeter(input = \"r\", map_perimeter_area_ratio_index = TRUE,     map_shape_index = TRUE, map_fractal_index = TRUE): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r  # import from grass to r r_perimeter <- terra::rast(rgrass::read_RAST(\"r_perimeter\", flags = \"quiet\", return_format = \"SGDF\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rast': r_perimeter not found in mapsets in search path: PERMANENT  # plot plot(r_perimeter, legend = FALSE, axes = FALSE, main = \"Perimeter (m)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_perimeter' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_perimeter, cex = .5) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_perimeter' not found  # import from grass to r r_perimeter_area_ratio_index <- terra::rast(rgrass::read_RAST(\"r_perimeter_area_ratio_index\", flags = \"quiet\", return_format = \"SGDF\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rast': r_perimeter_area_ratio_index not found in mapsets in search path: PERMANENT  # plot plot(r_perimeter_area_ratio_index, legend = FALSE, axes = FALSE, main = \"Perimeter-area ratio index\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_perimeter_area_ratio_index' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_perimeter_area_ratio_index, digits = 3, cex = .4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_perimeter_area_ratio_index' not found  # import from grass to r r_shape_index <- terra::rast(rgrass::read_RAST(\"r_shape_index\", flags = \"quiet\", return_format = \"SGDF\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rast': r_shape_index not found in mapsets in search path: PERMANENT  # plot plot(r_shape_index, legend = FALSE, axes = FALSE, main = \"Shape index\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_shape_index' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_shape_index, digits = 3, cex = .4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_shape_index' not found  # import from grass to r r_fractal_index <- terra::rast(rgrass::read_RAST(\"r_fractal_index\", flags = \"quiet\", return_format = \"SGDF\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rast': r_fractal_index not found in mapsets in search path: PERMANENT  # plot plot(r_fractal_index, legend = FALSE, axes = FALSE, main = \"Fractal dimension index\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_fractal_index' not found plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE)  text(r_fractal_index, digits = 3, cex = .4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_fractal_index' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_buffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create buffers and calculate statistics — lsm_statistic_buffer","title":"Create buffers and calculate statistics — lsm_statistic_buffer","text":"Create buffers calculate statistics","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_buffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create buffers and calculate statistics — lsm_statistic_buffer","text":"","code":"lsm_statistic_buffer(   input,   output = NULL,   landscape_metric,   landscape_metric_has_null = FALSE,   point,   buffer_distance,   column_prefix,   method = \"average\",   percentile = NULL )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_buffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create buffers and calculate statistics — lsm_statistic_buffer","text":"input [character=\"\"] output [character=\"\"]  Map name output inside GRASS Data Base. landscape_metric [character=\"\"] landscape_metric_has_null [character=\"\"] column_prefix [character=\"\"] method [character=\"\"]  Univariate statistics: number, null_cells, minimum ,maximum, range, average, stddev, variance, coeff_var, sum, first_quartile ,median, third_quartile, percentile percentile [character=\"\"] points [character=\"\"] distance [character=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_buffer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create buffers and calculate statistics — lsm_statistic_buffer","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # points p <- terra::vect(data.frame(x = c(235150, 234450, 235150),                             y = c(7525250, 7524850, 7524350)),                  geom = c(\"x\", \"y\"),                  crs = \"+proj=utm +zone=23 +south +datum=WGS84 +units=m +no_defs +type=crs\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Points\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) plot(p, cex = 3, add = TRUE)   # import vector from r to grass rgrass::write_VECT(x = p, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"p\")  # area lsmetrics::lsm_area_fragment(input = \"r\") #> Converting zeros to null #> Identifying fragments #> Calculation area #> Mask creating #> Area calculating #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Color assigning #> Table exporting #> Cleaning data  # buffer statistics lsmetrics::lsm_statistic_buffer(input = \"r\",                                 landscape_metric = \"r_fragment_area\",                                 landscape_metric_has_null = TRUE,                                 point = \"p\",                                 buffer_distance = 200,                                 column_prefix = \"area\",                                 method = \"average\") #> Error in lsmetrics::lsm_statistic_buffer(input = \"r\", landscape_metric = \"r_fragment_area\",     landscape_metric_has_null = TRUE, point = \"p\", buffer_distance = 200,     column_prefix = \"area\", method = \"average\"): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"vector\") #> p  # import from grass to r r_fragment_area <- rgrass::read_RAST(\"r_fragment_area\", flags = \"quiet\", return_format = \"terra\")  # import buffer v_buffer <- rgrass::read_VECT(\"r_p_buffer200\", flags = \"quiet\") #> Error in execGRASS(\"v.info\", flags = \"t\", map = vname, layer = layer,     intern = TRUE, ignore.stderr = ignore.stderr): The command: #> v.info -t map=r_p_buffer200 layer=1 #> produced an error (1) during execution: #> ERROR: Vector map <r_p_buffer200> not found  # plot plot(r_fragment_area, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area) plot(v_buffer, \"area_average\", legend = FALSE, alpha = .5, add = TRUE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'v_buffer' not found plot(p, col = \"gray30\", cex = 3, add = TRUE)  text(v_buffer, col = \"white\", labels = \"area_average\", cex = .7) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'v_buffer' not found  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create grids and calculate statistics — lsm_statistic_grid","title":"Create grids and calculate statistics — lsm_statistic_grid","text":"Create grids calculate statistics","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create grids and calculate statistics — lsm_statistic_grid","text":"","code":"lsm_statistic_grid(   input,   output = NULL,   landscape_metric,   landscape_metric_has_null = FALSE,   grid_size,   hexagon = FALSE,   column_prefix,   method = \"average\",   percentile = NULL )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create grids and calculate statistics — lsm_statistic_grid","text":"input [character=\"\"] output [character=\"\"]  Map name output inside GRASS Data Base. landscape_metric [character=\"\"] landscape_metric_has_null [character=\"\"] grid_size [character=\"\"] hexagon [character=\"\"] column_prefix [character=\"\"] method [character=\"\"]  Univariate statistics: number, null_cells, minimum ,maximum, range, average, stddev, variance, coeff_var, sum, first_quartile ,median, third_quartile, percentile percentile [character=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create grids and calculate statistics — lsm_statistic_grid","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_area_fragment(input = \"r\") #> Converting zeros to null #> Identifying fragments #> Calculation area #> Mask creating #> Area calculating #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Color assigning #> Table exporting #> Cleaning data  # files rgrass::execGRASS(cmd = \"g.list\", type = \"raster\") #> r #> r_fragment_area  # import r r_fragment_area <- rgrass::read_RAST(\"r_fragment_area\", flags = \"quiet\")  # plot plot(r_fragment_area, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area)  # grid lsmetrics::lsm_statistic_grid(input = \"r\",                               landscape_metric = \"r_fragment_area\",                               landscape_metric_has_null = TRUE,                               grid_size = 200,                               hexagon = TRUE,                               column_prefix = \"area\",                               method = \"average\") #> Error in lsmetrics::lsm_statistic_grid(input = \"r\", landscape_metric = \"r_fragment_area\",     landscape_metric_has_null = TRUE, grid_size = 200, hexagon = TRUE,     column_prefix = \"area\", method = \"average\"): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"vector\")  # import r r_grid <- rgrass::read_VECT(\"r_grid200\", flags = \"quiet\") #> Error in execGRASS(\"v.info\", flags = \"t\", map = vname, layer = layer,     intern = TRUE, ignore.stderr = ignore.stderr): The command: #> v.info -t map=r_grid200 layer=1 #> produced an error (1) during execution: #> ERROR: Vector map <r_grid200> not found  # plot r_grid <- r_grid[is.na(r_grid$area_average) == FALSE, ] #> Error: object 'r_grid' not found plot(r_grid, \"area_average\", legend = FALSE, axes = FALSE, main = \"Area average (ha)\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'r_grid' not found text(r_grid, labels = \"area_average\", cex = .7) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'text': object 'r_grid' not found plot(as.polygons(r), col = c(adjustcolor(\"white\", 0), adjustcolor(\"gray\", .5)), add = TRUE)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate statistics for vectors — lsm_statistic_vector","title":"Calculate statistics for vectors — lsm_statistic_vector","text":"Calculate statistics vectors","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate statistics for vectors — lsm_statistic_vector","text":"","code":"lsm_statistic_vector(   input,   output = NULL,   landscape_metric,   landscape_metric_has_null = FALSE,   vector,   type,   column_prefix,   method = \"average\",   percentile = NULL )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate statistics for vectors — lsm_statistic_vector","text":"input [character=\"\"] output [character=\"\"]  Map name output inside GRASS Data Base. landscape_metric [character=\"\"] landscape_metric_has_null [character=\"\"] vector [character=\"\"] type [character=\"\"] column_prefix [character=\"\"] method [character=\"\"]  Univariate statistics: number, null_cells, minimum ,maximum, range, average, stddev, variance, coeff_var, sum, first_quartile ,median, third_quartile, percentile percentile [character=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_statistic_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate statistics for vectors — lsm_statistic_vector","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape(proj_type = \"meters\")  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # vector p <- terra::vect(data.frame(x = c(235150, 234450, 235150),                             y = c(7525250, 7524850, 7524350)),                  geom = c(\"x\", \"y\"),                  crs = \"+proj=utm +zone=23 +south +datum=WGS84 +units=m +no_defs +type=crs\")  # import raster from r to grass rgrass::write_VECT(x = p, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"p\")  # area lsmetrics::lsm_area_fragment(input = \"r\") #> Converting zeros to null #> Identifying fragments #> Calculation area #> Mask creating #> Area calculating #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Color assigning #> Table exporting #> Cleaning data  # vector statistics lsmetrics::lsm_statistic_vector(input = \"r\",                                 landscape_metric = \"r_fragment_area\",                                 landscape_metric_has_null = TRUE,                                 vector = \"p\",                                 type = \"point\",                                 column_prefix = \"area\",                                 method = \"average\") #> Error in lsmetrics::lsm_statistic_vector(input = \"r\", landscape_metric = \"r_fragment_area\",     landscape_metric_has_null = TRUE, vector = \"p\", type = \"point\",     column_prefix = \"area\", method = \"average\"): object 'region_input' not found  # files rgrass::execGRASS(cmd = \"g.list\", type = \"vector\") #> p  # import from grass to r r_fragment_area <- rgrass::read_RAST(\"r_fragment_area\", flags = \"quiet\", return_format = \"terra\")  # import point v_point <- rgrass::read_VECT(\"p\", flags = \"quiet\")  # plot plot(r_fragment_area, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area) plot(v_point, \"area_average\", legend = FALSE, cex = 3, add = TRUE) #> Error: [plot] area_average is not a name in x plot(p, col = \"gray30\", cex = 3, add = TRUE)  text(v_point, col = \"white\", labels = \"area_average\", cex = .7) #> Error in `[.data.frame`(as.data.frame(x), , labels): undefined columns selected  # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_structural_connectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate structural connectivity — lsm_structural_connectivity","title":"Calculate structural connectivity — lsm_structural_connectivity","text":"Identifies patch calculates area hectare.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_structural_connectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate structural connectivity — lsm_structural_connectivity","text":"","code":"lsm_structural_connectivity(   input,   output = NULL,   zero_as_na = FALSE,   ncell = FALSE,   area_integer = FALSE )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_structural_connectivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate structural connectivity — lsm_structural_connectivity","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. ncell [logical(1)=FALSE]  TRUE area_integer [logical(1)=FALSE]  TRUE id [logical(1)=FALSE]  TRUE","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_structural_connectivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate structural connectivity — lsm_structural_connectivity","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Navigation and medium accuracy spatial referencing.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # structural connectivity lsmetrics::lsm_structural_connectivity(input = \"r\") #> Converting zero as null #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes #> Converting zero as null #> Converting null as zero #> Identifying the patches #> Converting zero as null #> Identifying the fragments #> Creating the matrix #> Filling the holes #> Changing the raster color #> Counting the cell number of patches #> Calculating the area of patches #> Changing the raster color #> Cleaning rasters #> Cleaning rasters  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_structural_connected_area <- rgrass::read_RAST(\"r_structural_connected_area\", flags = \"quiet\", return_format = \"terra\")  plot(r_structural_connected_area, legend = FALSE, axes = FALSE, main = \"Structural connected area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_structural_connected_area)   # import from grass to r r_structural_connectivity <- rgrass::read_RAST(\"r_structural_connectivity\", flags = \"quiet\", return_format = \"terra\")  plot(r_structural_connectivity, legend = FALSE, axes = FALSE, main = \"Structural connectivity (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_structural_connectivity)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_toy_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a toy landscape — lsm_toy_landscape","title":"Create a toy landscape — lsm_toy_landscape","text":"Create toy landscape.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_toy_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a toy landscape — lsm_toy_landscape","text":"","code":"lsm_toy_landscape(   proj_type = \"meters\",   values_type = \"binary\",   values_random = FALSE,   values_random_multiclass_parameter = 1 )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_toy_landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a toy landscape — lsm_toy_landscape","text":"proj_type [character=\"\"] values_type [character=\"\"] values_random [character=\"\"] values_random_multiclass_parameter [numeric()]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_toy_landscape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a toy landscape — lsm_toy_landscape","text":"","code":"library(lsmetrics) library(terra)  # toy landscape toy_landscape_binary <- lsmetrics::lsm_toy_landscape(     proj_type = \"meters\",     values_type = \"binary\",     values_random = FALSE)  toy_landscape_multiclass <- lsmetrics::lsm_toy_landscape(     proj_type = \"meters\",     values_type = \"multiclass\",     values_random = FALSE)  set.seed(42) toy_landscape_binary_random <- lsmetrics::lsm_toy_landscape(     proj_type = \"meters\",     values_type = \"binary\",     values_random = TRUE)  toy_landscape_multiclass_random <- lsmetrics::lsm_toy_landscape(     proj_type = \"meters\",     values_type = \"multiclass\",     values_random = TRUE)  # plot plot(toy_landscape_binary, legend = FALSE, axes = FALSE, main = \"Toy landscape (binary)\") plot(as.polygons(toy_landscape_binary, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(toy_landscape_binary), add = TRUE) text(toy_landscape_binary)   plot(toy_landscape_multiclass,      col = c(\"white\", \"#00a600\", \"#fffeb6\", \"#bcb9d8\", \"#fb7f73\", \"#7eb0d0\"),      legend = FALSE, axes = FALSE, main = \"Toy landscape (multi-class)\") plot(as.polygons(toy_landscape_multiclass, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(toy_landscape_multiclass), add = TRUE) text(toy_landscape_multiclass)   plot(toy_landscape_binary_random, legend = FALSE, axes = FALSE, main = \"Toy landscape (binary) and random\") plot(as.polygons(toy_landscape_binary_random, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(toy_landscape_binary_random), add = TRUE) text(toy_landscape_binary_random)   plot(toy_landscape_multiclass_random,      col = c(\"white\", \"#00a600\", \"#fffeb6\", \"#bcb9d8\", \"#fb7f73\", \"#7eb0d0\"),      legend = FALSE, axes = FALSE, main = \"Toy landscape (multi-class) and random\") plot(as.polygons(toy_landscape_multiclass_random, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(toy_landscape_multiclass_random), add = TRUE) text(toy_landscape_multiclass_random)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_vector_statistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate statistics for vectors — lsm_vector_statistic","title":"Calculate statistics for vectors — lsm_vector_statistic","text":"Calculate statistics vectors","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_vector_statistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate statistics for vectors — lsm_vector_statistic","text":"","code":"lsm_vector_statistic(   input,   output = NULL,   landscape_metric,   landscape_metric_has_null = FALSE,   vector,   type,   column_prefix,   method = \"average\",   percentile = NULL )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_vector_statistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate statistics for vectors — lsm_vector_statistic","text":"input [character=\"\"] output [character=\"\"]  Map name output inside GRASS Data Base. landscape_metric [character=\"\"] landscape_metric_has_null [character=\"\"] vector [character=\"\"] type [character=\"\"] column_prefix [character=\"\"] method [character=\"\"]  Univariate statistics: number, null_cells, minimum ,maximum, range, average, stddev, variance, coeff_var, sum, first_quartile ,median, third_quartile, percentile percentile [character=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_vector_statistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate statistics for vectors — lsm_vector_statistic","text":"","code":"library(lsmetrics) library(terra)  # read habitat data r <- lsmetrics::lsm_toy_landscape()  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- system(\"grass --config path\", inter = TRUE) # windows users need to find the grass gis path installation, e.g. \"C:/Program Files/GRASS GIS 8.3\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"unknown\", #>     BASEGEOGCRS[\"unknown\", #>         DATUM[\"World Geodetic System 1984\", #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ID[\"EPSG\",6326]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8901]]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]], #>         ID[\"EPSG\",17023]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # vector p <- terra::vect(data.frame(x = c(235150, 234450, 235150),                             y = c(7525250, 7524850, 7524350)),                  geom = c(\"x\", \"y\"),                  crs = \"+proj=utm +zone=23 +south +datum=WGS84 +units=m +no_defs +type=crs\")  # import raster from r to grass rgrass::write_VECT(x = p, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"p\")  # area lsmetrics::lsm_fragment_area(input = \"r\", id = TRUE, ncell = TRUE, area_integer = TRUE) #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes  # vector statistics lsmetrics::lsm_vector_statistic(input = \"r\",                                 landscape_metric = \"r_fragment_area_ha\",                                 landscape_metric_has_null = TRUE,                                 vector = \"p\",                                 type = \"point\",                                 column_prefix = \"area\",                                 method = \"average\") #> Processing input data (3 categories)... #> Adding columns '['area_average DOUBLE PRECISION']' #> Adding column <area_average> to the table #>    6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #>  100% #> Updating the database ... #> Statistics calculated from raster map <r_fragment_area_ha_binary> and #> uploaded to attribute table of vector map <p>.  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"vector\")  # import from grass to r r_fragment_area <- rgrass::read_RAST(\"r_fragment_area_ha\", flags = \"quiet\", return_format = \"terra\")  # import point v_point <- rgrass::read_VECT(\"p\", flags = \"quiet\")  # plot plot(r_fragment_area, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area) plot(v_point, \"area_average\", legend = FALSE, cex = 3, add = TRUE) plot(p, col = \"gray30\", cex = 3, add = TRUE) text(v_point, col = \"white\", labels = \"area_average\", cex = .7)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_vector_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate statistics for vectors — lsm_vector_statistics","title":"Calculate statistics for vectors — lsm_vector_statistics","text":"Calculate statistics vectors","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_vector_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate statistics for vectors — lsm_vector_statistics","text":"","code":"lsm_vector_statistics(   input,   output = NULL,   landscape_metric,   landscape_metric_has_null = FALSE,   vector,   type,   column_prefix,   method = \"average\",   percentile = NULL )"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_vector_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate statistics for vectors — lsm_vector_statistics","text":"input [character=\"\"] output [character=\"\"]  Map name output inside GRASS Data Base. landscape_metric [character=\"\"] landscape_metric_has_null [character=\"\"] vector [character=\"\"] type [character=\"\"] column_prefix [character=\"\"] method [character=\"\"]  Univariate statistics: number, null_cells, minimum ,maximum, range, average, stddev, variance, coeff_var, sum, first_quartile ,median, third_quartile, percentile percentile [character=\"\"]","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/lsm_vector_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate statistics for vectors — lsm_vector_statistics","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # points p <- terra::vect(data.frame(x = c(235150, 234450, 235150),                             y = c(7525250, 7524850, 7524350)),                  geom = c(\"x\", \"y\"),                  crs = \"+proj=utm +zone=23 +south +datum=WGS84 +units=m +no_defs +type=crs\")  # import raster from r to grass rgrass::write_VECT(x = p, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"p\") #> Warning: GDAL Message 6: dataset /tmp/RtmpVyOG68/file710d134b75155.gpkg does not support layer creation option ENCODING  # area lsmetrics::lsm_fragment_area(input = \"r\", id = TRUE, ncell = TRUE, area_integer = TRUE) #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes  # buffer statistics lsmetrics::lsm_buffer_statistics(input = \"r\",                                  landscape_metric = \"r_fragment_area_ha\",                                  landscape_metric_has_null = TRUE,                                  point = \"p\",                                  distance = 200,                                  column_prefix = \"area\",                                  method = \"average\") #> Buffering features... #>   33%  66% 100% #> Cleaning buffers... #> Building parts of topology... #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Registering primitives... #>  #> Snapping boundaries... #> Reading features... #> Snap vertices Pass 1: select points #>    0%  33%  66% 100% #> Snap vertices Pass 2: assign anchor vertices #>    4%  10%  15%  20%  26%  31%  36%  42%  47%  52%  57%  62%  68%  73%  78%  84%  89%  94% 100% #> Snap vertices Pass 3: snap to assigned points #>    0%  33%  66% 100% #> Breaking polygons... #> Breaking polygons (pass 1: select break points)... #>   33%  66% 100% #> Breaking polygons (pass 2: break at selected points)... #>   33%  66% 100% #> Removing duplicates... #>   33%  66% 100% #> Breaking boundaries... #>    0%  33%  66% 100% #> Removing duplicates... #>   33%  66% 100% #> Cleaning boundaries at nodes #>   33%  66% 100% #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Building areas... #>    0%  33%  66% 100% #> Removing dangles... #>   33%  66% 100% #> Removing bridges... #>   33%  66% 100% #> Attaching islands... #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Attaching islands... #>    0%  33%  66% 100% #> Calculating centroids for areas... #>   33%  66% 100% #> Building topology for vector map <r_p_buffer200@PERMANENT>... #> Registering primitives... #>  #> Building areas... #>    0%  33%  66% 100% #> Attaching islands... #>    0%  33%  66% 100% #> Attaching centroids... #>    0%  33%  66% 100% #> Processing input data (3 categories)... #> Adding columns '['area_average DOUBLE PRECISION']' #> Adding column <area_average> to the table #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Updating the database ... #> Statistics calculated from raster map <r_fragment_area_ha_zero> and #> uploaded to attribute table of vector map <r_p_buffer200>. #> Converting color rules into categories... #>    0%  33%  66% 100% #> Writing color rules... #> Color table for vector map <r_p_buffer200@PERMANENT> set to 'viridis'  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"vector\")  # import from grass to r r_fragment_area <- rgrass::read_RAST(\"r_fragment_area_ha\", flags = \"quiet\", return_format = \"terra\")  # import buffer v_buffer <- rgrass::read_VECT(\"r_p_buffer200\", flags = \"quiet\")  # plot plot(r_fragment_area, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area) plot(v_buffer, \"area_average\", alpha = .5, add = TRUE) plot(p, col = \"gray30\", cex = 3, add = TRUE) text(v_buffer, col = \"white\", labels = \"area_average\", cex = .7)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://mauriciovancine.github.io/lsmetrics/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":[]}]
